/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/Plugin.ts
var import_obsidian6 = require("obsidian");

// src/Settings.ts
var import_obsidian = require("obsidian");
var _notename = "${notename}";
var _filename = "${filename}";
var _datetime = "${datetime}";
var DEFAULT_SETTINGS = {
  folderName: `${_filename}_Attachments`,
  pastedImageName: `${_notename}-${_datetime}`,
  datetimeFormat: "YYYYMMDDHHmmssSSS",
  hideFolder: false,
  aeroFolder: true,
  autoRenameFolder: true,
  autoRenameFiles: true,
  autoDeleteFolder: false
};
var containsFilename = (settings) => {
  return settings.folderName.contains(_filename);
};
var encode = (text) => {
  const specialCharacters = ["\\$", "\\[", "\\]", "\\{", "\\}", "\\(", "\\)", "\\*", "\\+", "\\.", "\\?", "\\\\", "\\^"];
  const reg = new RegExp("[" + specialCharacters.join("") + "]", "gi");
  return text.replace(reg, (character) => `\\${character}`);
};
var buildFolderRegExp = (settings) => {
  let reg = encode(settings.folderName);
  reg = reg.replace(encode(_filename), ".+");
  return new RegExp("^" + reg + "$");
};
var buildFolderName = (settings, fileName) => {
  return "./" + settings.folderName.replace(_filename, fileName);
};
var buildPastedImageName = (settings, notename) => {
  const datetime = (0, import_obsidian.moment)().format(settings.datetimeFormat);
  return settings.pastedImageName.replace(_notename, notename).replace(_datetime, datetime);
};

// src/SettingTab.ts
var import_obsidian2 = require("obsidian");

// src/lang/zh.ts
var zh_default = {
  "plugin_name": "\u9644\u4EF6\u7BA1\u7406\u5668",
  "settings_folder_name": "\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_folder_name_desc": "\u9644\u4EF6\u6587\u4EF6\u5939\u7684\u540D\u79F0\uFF0C\u4F7F\u7528\u53D8\u91CF ${filename} \u83B7\u53D6\u7B14\u8BB0\uFF08md/canvas\uFF09\u6587\u4EF6\u540D\u79F0\uFF08\u5305\u542B\u540E\u7F00\uFF09\uFF0C\u4F8B\uFF1A${filename}_Attachments\u3002",
  "settings_pasted_image_file_name": "\u201C\u7C98\u8D34\u56FE\u7247\u201D\u6587\u4EF6\u540D",
  "settings_pasted_image_file_name_desc": "\u201C\u7C98\u8D34\u56FE\u7247\u201D\u4FDD\u5B58\u4E3A\u6587\u4EF6\u7684\u540D\u79F0\uFF0C\u4F7F\u7528\u53D8\u91CF ${notename} \u83B7\u53D6\u7B14\u8BB0\uFF08md/canvas\uFF09\u540D\u79F0\uFF0C\u4F7F\u7528\u53D8\u91CF ${datetime} \u83B7\u53D6\u65F6\u95F4\uFF0C\u4F8B\uFF1A${notename}-${datetime}\u3002",
  "settings_datetime_format": "${datetime} \u683C\u5F0F",
  "settings_datetime_format_desc": "\u65E5\u671F\u65F6\u95F4\u683C\u5F0F\uFF08\u4F7F\u7528 moment.js \u683C\u5F0F\uFF09\uFF0C\u4F8B\uFF1AYYYYMMDDHHmmssSSS\u3002",
  "settings_hide_folder": "\u9690\u85CF\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_aero_folder": "\u900F\u660E\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_auto_rename_folder": "\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_auto_rename_folder_desc": "\u7B14\u8BB0\uFF08md/canvas\uFF09\u540D\u79F0\u53D8\u5316\u65F6\uFF0C\u5982\u679C\u9644\u4EF6\u6587\u4EF6\u5939\u540D\u79F0\u4E2D\u5305\u542B\u201C${filename}\u201D\uFF0C\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6\u5939\u3002",
  "settings_auto_rename_files": "\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6",
  "settings_auto_rename_files_desc": "\u7B14\u8BB0\uFF08md/canvas\uFF09\u540D\u79F0\u53D8\u5316\u65F6\uFF0C\u5982\u679C\u9644\u4EF6\u6587\u4EF6\u540D\u79F0\u4E2D\u5305\u542B\u201C${notename}\u201D\uFF0C\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6\u3002",
  "settings_auto_delete_folder": "\u81EA\u52A8\u5220\u9664\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_auto_delete_folder_desc": "\u7B14\u8BB0\uFF08md/canvas\uFF09\u5220\u9664\u65F6\uFF0C\u5982\u679C\u9644\u4EF6\u6587\u4EF6\u5939\u540D\u79F0\u4E2D\u5305\u542B\u201C${filename}\u201D\uFF0C\u81EA\u52A8\u5220\u9664\u9644\u4EF6\u6587\u4EF6\u5939\u3002",
  "command_toggle_attachment_folder_visibility": "\u5207\u6362\u9644\u4EF6\u6587\u4EF6\u5939\u7684\u201C\u663E\u793A/\u9690\u85CF\u201D",
  "status_attachment_folder_visibility": "\u9644\u4EF6\u6587\u4EF6\u5939\u5DF2\u9690\u85CF"
};

// src/lang/en.ts
var en_default = {
  "plugin_name": "Attachment Manager",
  "settings_folder_name": "Attachment Folder",
  "settings_folder_name_desc": 'The name of the attachment folder, using the variable ${filename} to get name of the note("md/canvas") file. e.g., ${filename}_Attachments .',
  "settings_pasted_image_file_name": "Pasted Image Name",
  "settings_pasted_image_file_name_desc": '"Pasted Image" file name, using the variable ${notename} to get name of the note("md/canvas"), using the variable ${datetime} to get datetime. e.g., ${notename}-${datetime}) .',
  "settings_datetime_format": "${datetime} Format",
  "settings_datetime_format_desc": "Format for ${datetime} (use moment.js format). e.g., YYYYMMDDHHmmssSSS .",
  "settings_hide_folder": "Hide attachment folder",
  "settings_aero_folder": "Aero attachment folder",
  "settings_auto_rename_folder": "Automatically rename attachment folder",
  "settings_auto_rename_folder_desc": 'When renaming note("md/canvas"), automatically rename attachment folder if folder name contains "${filename}".',
  "settings_auto_rename_files": "Automatically rename attachment files",
  "settings_auto_rename_files_desc": 'When renaming note("md/canvas"), automatically rename attachment files if file name contains "${notename}".',
  "settings_auto_delete_folder": "Automatically delete attachment folder",
  "settings_auto_delete_folder_desc": 'When deleting note("md/canvas"), automatically delete attachment folder if folder name contains "${filename}".',
  "command_toggle_attachment_folder_visibility": "Toggle visibility of attachment folder",
  "status_attachment_folder_visibility": "Attachment folder are hidden."
};

// src/lang/index.ts
var lang = {
  en: en_default,
  zh: zh_default,
  get(key, ...args) {
    const language = window.localStorage.getItem("language") || "en";
    const _lang = this[language] || en_default;
    let text = _lang[key] || key;
    if (args) {
      for (let i = 0; i < args.length; i++) {
        text = text.replace(new RegExp(`\\{\\{${i}\\}\\}`, "g"), args[i]);
      }
    }
    return text;
  }
};

// src/SettingTab.ts
var SettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_folder_name")).setDesc(lang.get("settings_folder_name_desc")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.folderName).setValue(this.plugin.settings.folderName).onChange(async (value) => {
      value = (0, import_obsidian2.normalizePath)(value);
      this.plugin.settings.folderName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_pasted_image_file_name")).setDesc(lang.get("settings_pasted_image_file_name_desc")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.pastedImageName).setValue(this.plugin.settings.pastedImageName).onChange(async (value) => {
      this.plugin.settings.pastedImageName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_datetime_format")).setDesc(lang.get("settings_datetime_format_desc")).addMomentFormat((text) => text.setDefaultFormat(DEFAULT_SETTINGS.datetimeFormat).setValue(this.plugin.settings.datetimeFormat).onChange(async (value) => {
      this.plugin.settings.datetimeFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_hide_folder")).addToggle((toggle) => toggle.setValue(this.plugin.settings.hideFolder).onChange(async (value) => {
      this.plugin.settings.hideFolder = value;
      await this.plugin.saveSettings();
      await this.plugin.hideFolder.refresh();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_aero_folder")).addToggle((toggle) => toggle.setValue(this.plugin.settings.aeroFolder).onChange(async (value) => {
      this.plugin.settings.aeroFolder = value;
      await this.plugin.saveSettings();
      await this.plugin.hideFolder.refresh();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_auto_rename_folder")).setDesc(lang.get("settings_auto_rename_folder_desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoRenameFolder).onChange(async (value) => {
      this.plugin.settings.autoRenameFolder = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.autoRenameFolder)
      new import_obsidian2.Setting(containerEl).setName(lang.get("settings_auto_rename_files")).setDesc(lang.get("settings_auto_rename_files_desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoRenameFiles).onChange(async (value) => {
        this.plugin.settings.autoRenameFiles = value;
        await this.plugin.saveSettings();
      }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_auto_delete_folder")).setDesc(lang.get("settings_auto_delete_folder_desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoDeleteFolder).onChange(async (value) => {
      this.plugin.settings.autoDeleteFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/components/VaultAttachmentConfiguration.ts
var VaultAttachmentConfiguration = class {
  constructor(vault) {
    this.key = "attachmentFolderPath";
    this.key2 = "newLinkFormat";
    this.vault = vault;
  }
  backup() {
    this._value = this.vault.getConfig(this.key);
    this._value2 = this.vault.getConfig(this.key2);
    this.vault.setConfig(this.key2, "relative");
  }
  update(value) {
    this.vault.setConfig(this.key, value);
  }
  restore() {
    this.vault.setConfig(this.key, this._value);
    this.vault.setConfig(this.key2, this._value2);
  }
};

// src/handler/FileOpenHandler.ts
var FileOpenHandler = class {
  static build(plugin) {
    const handler = new FileOpenHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.plugin = plugin;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(file) {
    console.log("Handle File Open");
    if (file == null) {
      return;
    }
    if (file.extension !== "md" && file.extension !== "canvas") {
      return;
    }
    this.vaultAttachmentConfiguration.update(buildFolderName(this.plugin.settings, file.name));
  }
};

// src/handler/DeleteHandler.ts
var Path = __toESM(require("path"));
var DeleteHandler = class {
  static build(plugin) {
    const handler = new DeleteHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.vault = plugin.app.vault;
    this.plugin = plugin;
    this.adapter = plugin.adapter;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(file) {
    console.log("Handle Delete");
    if (file.extension !== "md" && file.extension !== "canvas") {
      return;
    }
    if (!containsFilename(this.plugin.settings) || !this.plugin.settings.autoDeleteFolder) {
      return;
    }
    const folderPath = Path.join(Path.dirname(file.path), buildFolderName(this.plugin.settings, file.name));
    if (await this.adapter.exists(folderPath)) {
      const trashOption = this.vault.getConfig("trashOption");
      if (trashOption === "system") {
        await this.adapter.trashSystem(folderPath);
      } else if (trashOption === "local") {
        await this.adapter.trashLocal(folderPath);
      } else {
        await this.adapter.remove(folderPath);
      }
      console.log("Deleted", folderPath);
    }
  }
};

// src/handler/RenameHandler.ts
var import_obsidian3 = require("obsidian");
var Path2 = __toESM(require("path"));
var RenameHandler = class {
  static build(plugin) {
    const handler = new RenameHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.vault = plugin.app.vault;
    this.plugin = plugin;
    this.adapter = plugin.adapter;
    this.fileManager = plugin.app.fileManager;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(newFile, oldFilePath) {
    console.log("Handle Rename");
    if (!(newFile instanceof import_obsidian3.TFile)) {
      return;
    }
    if (newFile.extension !== "md" && newFile.extension !== "canvas") {
      return;
    }
    if (!containsFilename(this.plugin.settings) || !this.plugin.settings.autoRenameFolder) {
      return;
    }
    const newFolderName = buildFolderName(this.plugin.settings, newFile.name);
    this.vaultAttachmentConfiguration.update(newFolderName);
    const newFolderPath = (0, import_obsidian3.normalizePath)(Path2.join(Path2.dirname(newFile.path), newFolderName));
    const oldFolderPath = (0, import_obsidian3.normalizePath)(Path2.join(Path2.dirname(oldFilePath), buildFolderName(this.plugin.settings, Path2.basename(oldFilePath))));
    await this._renameFolder(oldFolderPath, newFolderPath);
    if (!this.plugin.settings.autoRenameFiles) {
      return;
    }
    await this._renameFiles(newFolderPath, newFile.basename, Path2.basename(oldFilePath, "." + newFile.extension));
  }
  async _renameFolder(oldFolderPath, newFolderPath) {
    if (await !this.adapter.exists(oldFolderPath) || oldFolderPath === newFolderPath) {
      return;
    }
    const oldFolder = this.vault.getAbstractFileByPath(oldFolderPath);
    if (oldFolder == null) {
      return;
    }
    await this.fileManager.renameFile(oldFolder, newFolderPath);
    const oldFolderParentPath = Path2.dirname(oldFolderPath);
    const oldFolderParentListedFiles = await this.adapter.list(oldFolderParentPath);
    if (oldFolderParentListedFiles.folders.length === 0 && oldFolderParentListedFiles.files.length === 0) {
      await this.adapter.rmdir(oldFolderParentPath, true);
    }
  }
  async _renameFiles(newFolderPath, newFileName, oldFileName) {
    const attachmentFiles = (await this.adapter.list(newFolderPath)).files;
    for (const file of attachmentFiles) {
      let attachmentFileName = Path2.basename(file);
      if (!attachmentFileName.contains(oldFileName)) {
        continue;
      }
      attachmentFileName = attachmentFileName.replace(oldFileName, newFileName);
      const newFilePath = (0, import_obsidian3.normalizePath)(Path2.join(newFolderPath, attachmentFileName));
      const attachmentFile = this.vault.getAbstractFileByPath(file);
      if (attachmentFile == null) {
        continue;
      }
      await this.fileManager.renameFile(attachmentFile, newFilePath);
    }
  }
};

// src/components/HideFolder.ts
var import_obsidian4 = require("obsidian");
var HideFolder = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  load() {
    this.ribbonIconButton = this.plugin.addRibbonIcon(
      this.plugin.settings.hideFolder ? "eye-off" : "eye",
      lang.get("command_toggle_attachment_folder_visibility"),
      (evt) => {
        this.plugin.settings.hideFolder = !this.plugin.settings.hideFolder;
        this.plugin.saveSettings();
        this.refresh();
      }
    );
    this.statusBarItem = this.plugin.addStatusBarItem();
    this.statusBarItem.setText(this.plugin.settings.hideFolder ? "Attachment folders are hidden" : "");
    this.plugin.addCommand({
      id: "toggle-attachment-folder_visibility",
      name: lang.get("command_toggle_attachment_folder_visibility"),
      callback: () => {
        this.plugin.settings.hideFolder = !this.plugin.settings.hideFolder;
        this.plugin.saveSettings();
        this.refresh();
      }
    });
    this.mutationObserver = new MutationObserver((mutationRecord) => {
      mutationRecord.forEach((record) => {
        var _a, _b;
        if ((_b = (_a = record.target) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.classList.contains("nav-folder")) {
          this.refreshFolders();
        }
      });
    });
    this.mutationObserver.observe(window.document, { childList: true, subtree: true });
  }
  async refresh() {
    (0, import_obsidian4.setIcon)(this.ribbonIconButton, this.plugin.settings.hideFolder ? "eye-off" : "eye");
    this.statusBarItem.innerHTML = this.plugin.settings.hideFolder ? lang.get("status_attachment_folder_visibility") : "";
    await this.refreshFolders();
  }
  async refreshFolders() {
    const filter = buildFolderRegExp(this.plugin.settings);
    const folders = document.querySelectorAll(".nav-folder-title-content");
    folders.forEach((folder) => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const folderName = folder.innerHTML;
      if (filter.test(folderName)) {
        if (this.plugin.settings.hideFolder) {
          (_b = (_a = folder.parentElement) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.addClass("hide-attachment-folder");
        } else {
          (_d = (_c = folder.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.removeClass("hide-attachment-folder");
        }
        if (this.plugin.settings.aeroFolder) {
          (_f = (_e = folder.parentElement) == null ? void 0 : _e.parentElement) == null ? void 0 : _f.addClass("aero-attachment-folder");
        } else {
          (_h = (_g = folder.parentElement) == null ? void 0 : _g.parentElement) == null ? void 0 : _h.removeClass("aero-attachment-folder");
        }
      }
    });
  }
  unload() {
    this.mutationObserver.disconnect();
  }
};

// src/handler/CreateHandler.ts
var import_obsidian5 = require("obsidian");
var Path3 = __toESM(require("path"));
var CreateHandler = class {
  static build(plugin) {
    const handler = new CreateHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.vault = plugin.app.vault;
    this.plugin = plugin;
    this.workspace = plugin.app.workspace;
    this.fileManager = plugin.app.fileManager;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(file) {
    console.log("Handle File Create");
    if (!(file instanceof import_obsidian5.TFile)) {
      return;
    }
    if (!file.name.startsWith("Pasted image ")) {
      return;
    }
    const activeView = this.workspace.getActiveViewOfType(import_obsidian5.TextFileView);
    const activeFile = activeView == null ? void 0 : activeView.file;
    if (!activeFile) {
      return;
    }
    if (activeFile.extension !== "md" && activeFile.extension !== "canvas") {
      return;
    }
    const folderPath = Path3.join(Path3.dirname(activeFile.path), buildFolderName(this.plugin.settings, activeFile.name));
    if (!file.path.startsWith(folderPath)) {
      return;
    }
    const imagePath = (0, import_obsidian5.normalizePath)(Path3.join(folderPath, buildPastedImageName(this.plugin.settings, activeFile.basename) + "." + file.extension));
    if (activeFile.extension === "md") {
      this._rename4MD(file, imagePath, activeView, activeFile);
    }
    if (activeFile.extension === "canvas") {
      this._rename4Canvas(file, imagePath, activeView);
    }
  }
  async _rename4MD(file, newPath, activeView, activeFile) {
    const oldLinkText = this.fileManager.generateMarkdownLink(file, activeFile.path);
    await this.fileManager.renameFile(file, newPath);
    const newLinkText = this.fileManager.generateMarkdownLink(file, activeFile.path);
    let content = activeView.getViewData();
    content = content.replace(oldLinkText, newLinkText);
    activeView.setViewData(content, false);
  }
  async _rename4Canvas(file, newPath, activeView) {
    const oldPath = file.path;
    await this.fileManager.renameFile(file, newPath);
    let content = activeView.getViewData();
    content = content.replace(`/(file\\s*\\:\\s*\\")${oldPath}(\\")/g`, `$1${newPath}$2`);
    activeView.setViewData(content, false);
  }
};

// src/Plugin.ts
var Plugin = class extends import_obsidian6.Plugin {
  async onload() {
    console.log("loading plugin");
    this.adapter = this.app.vault.adapter;
    this.vaultAttachmentConfiguration = new VaultAttachmentConfiguration(this.app.vault);
    this.vaultAttachmentConfiguration.backup();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-open", FileOpenHandler.build(this)));
    this.registerEvent(this.app.vault.on("create", CreateHandler.build(this)));
    this.registerEvent(this.app.vault.on("rename", RenameHandler.build(this)));
    this.registerEvent(this.app.vault.on("delete", DeleteHandler.build(this)));
    this.hideFolder = new HideFolder(this);
    this.hideFolder.load();
  }
  onunload() {
    console.log("unloading plugin");
    this.vaultAttachmentConfiguration.restore();
    this.hideFolder.unload();
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

// main.ts
var main_default = Plugin;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvUGx1Z2luLnRzIiwgInNyYy9TZXR0aW5ncy50cyIsICJzcmMvU2V0dGluZ1RhYi50cyIsICJzcmMvbGFuZy96aC50cyIsICJzcmMvbGFuZy9lbi50cyIsICJzcmMvbGFuZy9pbmRleC50cyIsICJzcmMvY29tcG9uZW50cy9WYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uLnRzIiwgInNyYy9oYW5kbGVyL0ZpbGVPcGVuSGFuZGxlci50cyIsICJzcmMvaGFuZGxlci9EZWxldGVIYW5kbGVyLnRzIiwgInNyYy9oYW5kbGVyL1JlbmFtZUhhbmRsZXIudHMiLCAic3JjL2NvbXBvbmVudHMvSGlkZUZvbGRlci50cyIsICJzcmMvaGFuZGxlci9DcmVhdGVIYW5kbGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICcuL3NyYy9QbHVnaW4nO1xuXG5leHBvcnQgZGVmYXVsdCBQbHVnaW47IiwgImltcG9ydCB7IFBsdWdpbiBhcyBPYnNpZGlhblBsdWdpbiwgRmlsZVN5c3RlbUFkYXB0ZXIgfSBmcm9tICdvYnNpZGlhbic7XG5cbmltcG9ydCB7IFNldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSBcIi4vU2V0dGluZ3NcIjtcbmltcG9ydCB7IFNldHRpbmdUYWIgfSBmcm9tICcuL1NldHRpbmdUYWInO1xuaW1wb3J0IHsgVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiB9IGZyb20gJy4vY29tcG9uZW50cy9WYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uJztcbmltcG9ydCB7IEZpbGVPcGVuSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlci9GaWxlT3BlbkhhbmRsZXInO1xuaW1wb3J0IHsgRGVsZXRlSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlci9EZWxldGVIYW5kbGVyJztcbmltcG9ydCB7IFJlbmFtZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXIvUmVuYW1lSGFuZGxlcic7XG5pbXBvcnQgeyBIaWRlRm9sZGVyIH0gZnJvbSAnLi9jb21wb25lbnRzL0hpZGVGb2xkZXInO1xuaW1wb3J0IHsgQ3JlYXRlSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlci9DcmVhdGVIYW5kbGVyJztcblxuZXhwb3J0IGNsYXNzIFBsdWdpbiBleHRlbmRzIE9ic2lkaWFuUGx1Z2luIHtcbiAgICBzZXR0aW5nczogU2V0dGluZ3NcbiAgICBoaWRlRm9sZGVyOiBIaWRlRm9sZGVyXG4gICAgYWRhcHRlcjogRmlsZVN5c3RlbUFkYXB0ZXJcbiAgICB2YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uOiBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nIHBsdWdpbicpO1xuXG4gICAgICAgIHRoaXMuYWRhcHRlciA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgRmlsZVN5c3RlbUFkYXB0ZXI7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiA9IG5ldyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uKHRoaXMuYXBwLnZhdWx0KTtcbiAgICAgICAgdGhpcy52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uLmJhY2t1cCgpO1xuXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgICAgIC8vIFx1NjU4N1x1NEVGNlx1NjI1M1x1NUYwMFxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW9wZW4nLCBGaWxlT3BlbkhhbmRsZXIuYnVpbGQodGhpcykpKTtcbiAgICAgICAgLy8gXHU2NTg3XHU0RUY2XHU1MjFCXHU1RUZBXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignY3JlYXRlJywgQ3JlYXRlSGFuZGxlci5idWlsZCh0aGlzKSkpO1xuICAgICAgICAvLyBcdTY1ODdcdTRFRjZcdTkxQ0RcdTU0N0RcdTU0MERcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLnZhdWx0Lm9uKCdyZW5hbWUnLCBSZW5hbWVIYW5kbGVyLmJ1aWxkKHRoaXMpKSk7XG4gICAgICAgIC8vIFx1NjU4N1x1NEVGNlx1NTIyMFx1OTY2NFxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAudmF1bHQub24oJ2RlbGV0ZScsIERlbGV0ZUhhbmRsZXIuYnVpbGQodGhpcykpKTtcblxuICAgICAgICB0aGlzLmhpZGVGb2xkZXIgPSBuZXcgSGlkZUZvbGRlcih0aGlzKTtcbiAgICAgICAgdGhpcy5oaWRlRm9sZGVyLmxvYWQoKTtcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3VubG9hZGluZyBwbHVnaW4nKTtcbiAgICAgICAgdGhpcy52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uLnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5oaWRlRm9sZGVyLnVubG9hZCgpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgbW9tZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xuICAgIGZvbGRlck5hbWU6IHN0cmluZztcbiAgICBwYXN0ZWRJbWFnZU5hbWU6IHN0cmluZztcbiAgICBkYXRldGltZUZvcm1hdDogc3RyaW5nO1xuICAgIGhpZGVGb2xkZXI6IGJvb2xlYW47XG4gICAgYWVyb0ZvbGRlcjogYm9vbGVhbjtcbiAgICBhdXRvUmVuYW1lRm9sZGVyOiBib29sZWFuO1xuICAgIGF1dG9SZW5hbWVGaWxlczogYm9vbGVhbjtcbiAgICBhdXRvRGVsZXRlRm9sZGVyOiBib29sZWFuO1xufVxuXG5jb25zdCBfbm90ZW5hbWUgPSBcIiR7bm90ZW5hbWV9XCI7XG5jb25zdCBfZmlsZW5hbWUgPSBcIiR7ZmlsZW5hbWV9XCI7XG5jb25zdCBfZGF0ZXRpbWUgPSBcIiR7ZGF0ZXRpbWV9XCI7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBTZXR0aW5ncyA9IHtcbiAgICBmb2xkZXJOYW1lOiBgJHtfZmlsZW5hbWV9X0F0dGFjaG1lbnRzYCxcbiAgICBwYXN0ZWRJbWFnZU5hbWU6IGAke19ub3RlbmFtZX0tJHtfZGF0ZXRpbWV9YCxcbiAgICBkYXRldGltZUZvcm1hdDogJ1lZWVlNTURESEhtbXNzU1NTJyxcbiAgICBoaWRlRm9sZGVyOiBmYWxzZSxcbiAgICBhZXJvRm9sZGVyOiB0cnVlLFxuICAgIGF1dG9SZW5hbWVGb2xkZXI6IHRydWUsXG4gICAgYXV0b1JlbmFtZUZpbGVzOiB0cnVlLFxuICAgIGF1dG9EZWxldGVGb2xkZXI6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgY29udGFpbnNGaWxlbmFtZSA9IChzZXR0aW5nczogU2V0dGluZ3MpID0+IHtcbiAgICByZXR1cm4gc2V0dGluZ3MuZm9sZGVyTmFtZS5jb250YWlucyhfZmlsZW5hbWUpO1xufVxuXG5jb25zdCBlbmNvZGUgPSAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgLy8gXHU3Mjc5XHU2QjhBXHU1QjU3XHU3QjI2XG4gICAgY29uc3Qgc3BlY2lhbENoYXJhY3RlcnMgPSBbXCJcXFxcJFwiLCBcIlxcXFxbXCIsIFwiXFxcXF1cIiwgXCJcXFxce1wiLCBcIlxcXFx9XCIsIFwiXFxcXChcIiwgXCJcXFxcKVwiLCBcIlxcXFwqXCIsIFwiXFxcXCtcIiwgXCJcXFxcLlwiLCBcIlxcXFw/XCIsIFwiXFxcXFxcXFxcIiwgXCJcXFxcXlwiXTtcbiAgICAvLyBcdTcyNzlcdTZCOEFcdTVCNTdcdTdCMjZcdTc2ODRcdTUzMzlcdTkxNERcdTZCNjNcdTUyMTlcbiAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKFwiW1wiICsgc3BlY2lhbENoYXJhY3RlcnMuam9pbihcIlwiKSArIFwiXVwiLCAnZ2knKTtcbiAgICAvLyBcdTVCRjlcdTcyNzlcdTZCOEFcdTVCNTdcdTdCMjZcdThGREJcdTg4NENcdThGNkNcdTRFNDlcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJlZywgKGNoYXJhY3Rlcjogc3RyaW5nKSA9PiBgXFxcXCR7Y2hhcmFjdGVyfWApO1xufVxuXG5leHBvcnQgY29uc3QgYnVpbGRGb2xkZXJSZWdFeHAgPSAoc2V0dGluZ3M6IFNldHRpbmdzKSA9PiB7XG4gICAgbGV0IHJlZyA9IGVuY29kZShzZXR0aW5ncy5mb2xkZXJOYW1lKTtcbiAgICByZWcgPSByZWcucmVwbGFjZShlbmNvZGUoX2ZpbGVuYW1lKSwgXCIuK1wiKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl5cIiArIHJlZyArIFwiJFwiKTtcbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkRm9sZGVyTmFtZSA9IChzZXR0aW5nczogU2V0dGluZ3MsIGZpbGVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAvLyBcdTYzMDdcdTVCOUFcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcdTYyNDBcdTU3MjhcdTY1ODdcdTRFRjZcdTU5MzlcdUZGMDhcIi4vXCJcdUZGMDlcdTRFMEJcdTYzMDdcdTVCOUFcdTc2ODRcdTY1ODdcdTRFRjZcdTU5MzlcbiAgICByZXR1cm4gXCIuL1wiICsgc2V0dGluZ3MuZm9sZGVyTmFtZS5yZXBsYWNlKF9maWxlbmFtZSwgZmlsZU5hbWUpO1xufVxuXG5leHBvcnQgY29uc3QgYnVpbGRQYXN0ZWRJbWFnZU5hbWUgPSAoc2V0dGluZ3M6IFNldHRpbmdzLCBub3RlbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgZGF0ZXRpbWUgPSBtb21lbnQoKS5mb3JtYXQoc2V0dGluZ3MuZGF0ZXRpbWVGb3JtYXQpO1xuICAgIHJldHVybiBzZXR0aW5ncy5wYXN0ZWRJbWFnZU5hbWUucmVwbGFjZShfbm90ZW5hbWUsIG5vdGVuYW1lKS5yZXBsYWNlKF9kYXRldGltZSwgZGF0ZXRpbWUpO1xufVxuIiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgbm9ybWFsaXplUGF0aCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IGxhbmcgfSBmcm9tICcuL2xhbmcnXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tICcuL1BsdWdpbic7XG5pbXBvcnQgeyBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi9TZXR0aW5ncyc7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBQbHVnaW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShsYW5nLmdldCgnc2V0dGluZ3NfZm9sZGVyX25hbWUnKSlcbiAgICAgICAgICAgIC5zZXREZXNjKGxhbmcuZ2V0KCdzZXR0aW5nc19mb2xkZXJfbmFtZV9kZXNjJykpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoREVGQVVMVF9TRVRUSU5HUy5mb2xkZXJOYW1lKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJOYW1lKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5vcm1hbGl6ZVBhdGgodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJOYW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKGxhbmcuZ2V0KCdzZXR0aW5nc19wYXN0ZWRfaW1hZ2VfZmlsZV9uYW1lJykpXG4gICAgICAgICAgICAuc2V0RGVzYyhsYW5nLmdldCgnc2V0dGluZ3NfcGFzdGVkX2ltYWdlX2ZpbGVfbmFtZV9kZXNjJykpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoREVGQVVMVF9TRVRUSU5HUy5wYXN0ZWRJbWFnZU5hbWUpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3RlZEltYWdlTmFtZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzdGVkSW1hZ2VOYW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKGxhbmcuZ2V0KCdzZXR0aW5nc19kYXRldGltZV9mb3JtYXQnKSlcbiAgICAgICAgICAgIC5zZXREZXNjKGxhbmcuZ2V0KCdzZXR0aW5nc19kYXRldGltZV9mb3JtYXRfZGVzYycpKVxuICAgICAgICAgICAgLmFkZE1vbWVudEZvcm1hdCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0RGVmYXVsdEZvcm1hdChERUZBVUxUX1NFVFRJTkdTLmRhdGV0aW1lRm9ybWF0KVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRldGltZUZvcm1hdClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGF0ZXRpbWVGb3JtYXQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUobGFuZy5nZXQoJ3NldHRpbmdzX2hpZGVfZm9sZGVyJykpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlcilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmhpZGVGb2xkZXIucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKGxhbmcuZ2V0KCdzZXR0aW5nc19hZXJvX2ZvbGRlcicpKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFlcm9Gb2xkZXIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hZXJvRm9sZGVyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5oaWRlRm9sZGVyLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShsYW5nLmdldCgnc2V0dGluZ3NfYXV0b19yZW5hbWVfZm9sZGVyJykpXG4gICAgICAgICAgICAuc2V0RGVzYyhsYW5nLmdldCgnc2V0dGluZ3NfYXV0b19yZW5hbWVfZm9sZGVyX2Rlc2MnKSlcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvUmVuYW1lRm9sZGVyKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1JlbmFtZUZvbGRlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9SZW5hbWVGb2xkZXIpXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShsYW5nLmdldCgnc2V0dGluZ3NfYXV0b19yZW5hbWVfZmlsZXMnKSlcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhsYW5nLmdldCgnc2V0dGluZ3NfYXV0b19yZW5hbWVfZmlsZXNfZGVzYycpKVxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1JlbmFtZUZpbGVzKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvUmVuYW1lRmlsZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShsYW5nLmdldCgnc2V0dGluZ3NfYXV0b19kZWxldGVfZm9sZGVyJykpXG4gICAgICAgICAgICAuc2V0RGVzYyhsYW5nLmdldCgnc2V0dGluZ3NfYXV0b19kZWxldGVfZm9sZGVyX2Rlc2MnKSlcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvRGVsZXRlRm9sZGVyKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b0RlbGV0ZUZvbGRlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcInBsdWdpbl9uYW1lXCI6IFwiXHU5NjQ0XHU0RUY2XHU3QkExXHU3NDA2XHU1NjY4XCIsXG4gICAgXCJzZXR0aW5nc19mb2xkZXJfbmFtZVwiOiBcIlx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVwiLFxuICAgIFwic2V0dGluZ3NfZm9sZGVyX25hbWVfZGVzY1wiOiBcIlx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1NzY4NFx1NTQwRFx1NzlGMFx1RkYwQ1x1NEY3Rlx1NzUyOFx1NTNEOFx1OTFDRiAke2ZpbGVuYW1lfSBcdTgzQjdcdTUzRDZcdTdCMTRcdThCQjBcdUZGMDhtZC9jYW52YXNcdUZGMDlcdTY1ODdcdTRFRjZcdTU0MERcdTc5RjBcdUZGMDhcdTUzMDVcdTU0MkJcdTU0MEVcdTdGMDBcdUZGMDlcdUZGMENcdTRGOEJcdUZGMUEke2ZpbGVuYW1lfV9BdHRhY2htZW50c1x1MzAwMlwiLFxuICAgIFwic2V0dGluZ3NfcGFzdGVkX2ltYWdlX2ZpbGVfbmFtZVwiOiBcIlx1MjAxQ1x1N0M5OFx1OEQzNFx1NTZGRVx1NzI0N1x1MjAxRFx1NjU4N1x1NEVGNlx1NTQwRFwiLFxuICAgIFwic2V0dGluZ3NfcGFzdGVkX2ltYWdlX2ZpbGVfbmFtZV9kZXNjXCI6IFwiXHUyMDFDXHU3Qzk4XHU4RDM0XHU1NkZFXHU3MjQ3XHUyMDFEXHU0RkREXHU1QjU4XHU0RTNBXHU2NTg3XHU0RUY2XHU3Njg0XHU1NDBEXHU3OUYwXHVGRjBDXHU0RjdGXHU3NTI4XHU1M0Q4XHU5MUNGICR7bm90ZW5hbWV9IFx1ODNCN1x1NTNENlx1N0IxNFx1OEJCMFx1RkYwOG1kL2NhbnZhc1x1RkYwOVx1NTQwRFx1NzlGMFx1RkYwQ1x1NEY3Rlx1NzUyOFx1NTNEOFx1OTFDRiAke2RhdGV0aW1lfSBcdTgzQjdcdTUzRDZcdTY1RjZcdTk1RjRcdUZGMENcdTRGOEJcdUZGMUEke25vdGVuYW1lfS0ke2RhdGV0aW1lfVx1MzAwMlwiLFxuICAgIFwic2V0dGluZ3NfZGF0ZXRpbWVfZm9ybWF0XCI6IFwiJHtkYXRldGltZX0gXHU2ODNDXHU1RjBGXCIsXG4gICAgXCJzZXR0aW5nc19kYXRldGltZV9mb3JtYXRfZGVzY1wiOiBcIlx1NjVFNVx1NjcxRlx1NjVGNlx1OTVGNFx1NjgzQ1x1NUYwRlx1RkYwOFx1NEY3Rlx1NzUyOCBtb21lbnQuanMgXHU2ODNDXHU1RjBGXHVGRjA5XHVGRjBDXHU0RjhCXHVGRjFBWVlZWU1NRERISG1tc3NTU1NcdTMwMDJcIixcbiAgICBcInNldHRpbmdzX2hpZGVfZm9sZGVyXCI6IFwiXHU5NjkwXHU4NUNGXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XCIsXG4gICAgXCJzZXR0aW5nc19hZXJvX2ZvbGRlclwiOiBcIlx1OTAwRlx1NjYwRVx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19yZW5hbWVfZm9sZGVyXCI6IFwiXHU4MUVBXHU1MkE4XHU5MUNEXHU1NDdEXHU1NDBEXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX3JlbmFtZV9mb2xkZXJfZGVzY1wiOiBcIlx1N0IxNFx1OEJCMFx1RkYwOG1kL2NhbnZhc1x1RkYwOVx1NTQwRFx1NzlGMFx1NTNEOFx1NTMxNlx1NjVGNlx1RkYwQ1x1NTk4Mlx1Njc5Q1x1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1NTQwRFx1NzlGMFx1NEUyRFx1NTMwNVx1NTQyQlx1MjAxQyR7ZmlsZW5hbWV9XHUyMDFEXHVGRjBDXHU4MUVBXHU1MkE4XHU5MUNEXHU1NDdEXHU1NDBEXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XHUzMDAyXCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX3JlbmFtZV9maWxlc1wiOiBcIlx1ODFFQVx1NTJBOFx1OTFDRFx1NTQ3RFx1NTQwRFx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19yZW5hbWVfZmlsZXNfZGVzY1wiOiBcIlx1N0IxNFx1OEJCMFx1RkYwOG1kL2NhbnZhc1x1RkYwOVx1NTQwRFx1NzlGMFx1NTNEOFx1NTMxNlx1NjVGNlx1RkYwQ1x1NTk4Mlx1Njc5Q1x1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTQwRFx1NzlGMFx1NEUyRFx1NTMwNVx1NTQyQlx1MjAxQyR7bm90ZW5hbWV9XHUyMDFEXHVGRjBDXHU4MUVBXHU1MkE4XHU5MUNEXHU1NDdEXHU1NDBEXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHUzMDAyXCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX2RlbGV0ZV9mb2xkZXJcIjogXCJcdTgxRUFcdTUyQThcdTUyMjBcdTk2NjRcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcIixcbiAgICBcInNldHRpbmdzX2F1dG9fZGVsZXRlX2ZvbGRlcl9kZXNjXCI6IFwiXHU3QjE0XHU4QkIwXHVGRjA4bWQvY2FudmFzXHVGRjA5XHU1MjIwXHU5NjY0XHU2NUY2XHVGRjBDXHU1OTgyXHU2NzlDXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XHU1NDBEXHU3OUYwXHU0RTJEXHU1MzA1XHU1NDJCXHUyMDFDJHtmaWxlbmFtZX1cdTIwMURcdUZGMENcdTgxRUFcdTUyQThcdTUyMjBcdTk2NjRcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTMwMDJcIixcbiAgICBcImNvbW1hbmRfdG9nZ2xlX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIjogXCJcdTUyMDdcdTYzNjJcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTc2ODRcdTIwMUNcdTY2M0VcdTc5M0EvXHU5NjkwXHU4NUNGXHUyMDFEXCIsXG4gICAgXCJzdGF0dXNfYXR0YWNobWVudF9mb2xkZXJfdmlzaWJpbGl0eVwiOiBcIlx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1NURGMlx1OTY5MFx1ODVDRlwiLFxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcInBsdWdpbl9uYW1lXCI6IFwiQXR0YWNobWVudCBNYW5hZ2VyXCIsXG4gICAgXCJzZXR0aW5nc19mb2xkZXJfbmFtZVwiOiBcIkF0dGFjaG1lbnQgRm9sZGVyXCIsXG4gICAgXCJzZXR0aW5nc19mb2xkZXJfbmFtZV9kZXNjXCI6IFwiVGhlIG5hbWUgb2YgdGhlIGF0dGFjaG1lbnQgZm9sZGVyLCB1c2luZyB0aGUgdmFyaWFibGUgJHtmaWxlbmFtZX0gdG8gZ2V0IG5hbWUgb2YgdGhlIG5vdGUoXFxcIm1kL2NhbnZhc1xcXCIpIGZpbGUuIGUuZy4sICR7ZmlsZW5hbWV9X0F0dGFjaG1lbnRzIC5cIixcbiAgICBcInNldHRpbmdzX3Bhc3RlZF9pbWFnZV9maWxlX25hbWVcIjogXCJQYXN0ZWQgSW1hZ2UgTmFtZVwiLFxuICAgIFwic2V0dGluZ3NfcGFzdGVkX2ltYWdlX2ZpbGVfbmFtZV9kZXNjXCI6IFwiXFxcIlBhc3RlZCBJbWFnZVxcXCIgZmlsZSBuYW1lLCB1c2luZyB0aGUgdmFyaWFibGUgJHtub3RlbmFtZX0gdG8gZ2V0IG5hbWUgb2YgdGhlIG5vdGUoXFxcIm1kL2NhbnZhc1xcXCIpLCB1c2luZyB0aGUgdmFyaWFibGUgJHtkYXRldGltZX0gdG8gZ2V0IGRhdGV0aW1lLiBlLmcuLCAke25vdGVuYW1lfS0ke2RhdGV0aW1lfSkgLlwiLFxuICAgIFwic2V0dGluZ3NfZGF0ZXRpbWVfZm9ybWF0XCI6IFwiJHtkYXRldGltZX0gRm9ybWF0XCIsXG4gICAgXCJzZXR0aW5nc19kYXRldGltZV9mb3JtYXRfZGVzY1wiOiBcIkZvcm1hdCBmb3IgJHtkYXRldGltZX0gKHVzZSBtb21lbnQuanMgZm9ybWF0KS4gZS5nLiwgWVlZWU1NRERISG1tc3NTU1MgLlwiLFxuICAgIFwic2V0dGluZ3NfaGlkZV9mb2xkZXJcIjogXCJIaWRlIGF0dGFjaG1lbnQgZm9sZGVyXCIsXG4gICAgXCJzZXR0aW5nc19hZXJvX2ZvbGRlclwiOiBcIkFlcm8gYXR0YWNobWVudCBmb2xkZXJcIixcbiAgICBcInNldHRpbmdzX2F1dG9fcmVuYW1lX2ZvbGRlclwiOiBcIkF1dG9tYXRpY2FsbHkgcmVuYW1lIGF0dGFjaG1lbnQgZm9sZGVyXCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX3JlbmFtZV9mb2xkZXJfZGVzY1wiOiBcIldoZW4gcmVuYW1pbmcgbm90ZShcXFwibWQvY2FudmFzXFxcIiksIGF1dG9tYXRpY2FsbHkgcmVuYW1lIGF0dGFjaG1lbnQgZm9sZGVyIGlmIGZvbGRlciBuYW1lIGNvbnRhaW5zIFxcXCIke2ZpbGVuYW1lfVxcXCIuXCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX3JlbmFtZV9maWxlc1wiOiBcIkF1dG9tYXRpY2FsbHkgcmVuYW1lIGF0dGFjaG1lbnQgZmlsZXNcIixcbiAgICBcInNldHRpbmdzX2F1dG9fcmVuYW1lX2ZpbGVzX2Rlc2NcIjogXCJXaGVuIHJlbmFtaW5nIG5vdGUoXFxcIm1kL2NhbnZhc1xcXCIpLCBhdXRvbWF0aWNhbGx5IHJlbmFtZSBhdHRhY2htZW50IGZpbGVzIGlmIGZpbGUgbmFtZSBjb250YWlucyBcXFwiJHtub3RlbmFtZX1cXFwiLlwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19kZWxldGVfZm9sZGVyXCI6IFwiQXV0b21hdGljYWxseSBkZWxldGUgYXR0YWNobWVudCBmb2xkZXJcIixcbiAgICBcInNldHRpbmdzX2F1dG9fZGVsZXRlX2ZvbGRlcl9kZXNjXCI6IFwiV2hlbiBkZWxldGluZyBub3RlKFxcXCJtZC9jYW52YXNcXFwiKSwgYXV0b21hdGljYWxseSBkZWxldGUgYXR0YWNobWVudCBmb2xkZXIgaWYgZm9sZGVyIG5hbWUgY29udGFpbnMgXFxcIiR7ZmlsZW5hbWV9XFxcIi5cIixcbiAgICBcImNvbW1hbmRfdG9nZ2xlX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIjogXCJUb2dnbGUgdmlzaWJpbGl0eSBvZiBhdHRhY2htZW50IGZvbGRlclwiLFxuICAgIFwic3RhdHVzX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIjogXCJBdHRhY2htZW50IGZvbGRlciBhcmUgaGlkZGVuLlwiLFxufVxuIiwgImltcG9ydCB6aCBmcm9tICcuL3poJztcbmltcG9ydCBlbiBmcm9tICcuL2VuJztcblxuZXhwb3J0IGNvbnN0IGxhbmcgPSB7XG4gICAgZW4sXG4gICAgemgsXG4gICAgZ2V0KGtleTogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1OEJFRFx1OEEwMFx1OEJCRVx1N0Y2RVxuICAgICAgICBjb25zdCBsYW5ndWFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2UnKSB8fCBcImVuXCI7XG4gICAgICAgIC8vIFx1NjI3RVx1NEUwRFx1NTIzMFx1OUVEOFx1OEJBNCBlblxuICAgICAgICBjb25zdCBfbGFuZyA9IHRoaXNbbGFuZ3VhZ2VdIHx8IGVuO1xuICAgICAgICAvLyBcdTYyN0VcdTRFMERcdTUyMzAga2V5XHVGRjBDXHU3NkY0XHU2M0E1XHU0RjdGXHU3NTI4IGtleVxuICAgICAgICBsZXQgdGV4dCA9IF9sYW5nW2tleV0gfHwga2V5O1xuICAgICAgICAvLyBcdTY2RkZcdTYzNjJcdTUzNjBcdTRGNERcdTdCMjZcdTUzQzJcdTY1NzBcbiAgICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChgXFxcXHtcXFxceyR7aX1cXFxcfVxcXFx9YCwgXCJnXCIpLCBhcmdzW2ldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBWYXVsdCB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY2xhc3MgVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiB7XG4gICAgdmF1bHQ6IFZhdWx0XG4gICAga2V5ID0gXCJhdHRhY2htZW50Rm9sZGVyUGF0aFwiXG4gICAgX3ZhbHVlOiBzdHJpbmdcbiAgICBrZXkyID0gXCJuZXdMaW5rRm9ybWF0XCJcbiAgICBfdmFsdWUyOiBzdHJpbmdcblxuICAgIGNvbnN0cnVjdG9yKHZhdWx0OiBWYXVsdCkge1xuICAgICAgICB0aGlzLnZhdWx0ID0gdmF1bHQ7XG4gICAgfVxuXG4gICAgYmFja3VwKCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLnZhdWx0LmdldENvbmZpZyh0aGlzLmtleSk7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLl92YWx1ZTIgPSB0aGlzLnZhdWx0LmdldENvbmZpZyh0aGlzLmtleTIpXG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLnZhdWx0LnNldENvbmZpZyh0aGlzLmtleTIsIFwicmVsYXRpdmVcIik7XG4gICAgfVxuXG4gICAgdXBkYXRlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIHRoaXMudmF1bHQuc2V0Q29uZmlnKHRoaXMua2V5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmVzdG9yZSgpIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIHRoaXMudmF1bHQuc2V0Q29uZmlnKHRoaXMua2V5LCB0aGlzLl92YWx1ZSk7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLnZhdWx0LnNldENvbmZpZyh0aGlzLmtleTIsIHRoaXMuX3ZhbHVlMik7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwiLi4vUGx1Z2luXCJcbmltcG9ydCB7IFZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9WYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXCJcbmltcG9ydCB7IGJ1aWxkRm9sZGVyTmFtZSB9IGZyb20gXCIuLi9TZXR0aW5nc1wiXG5cbmV4cG9ydCBjbGFzcyBGaWxlT3BlbkhhbmRsZXIge1xuICAgIHBsdWdpbjogUGx1Z2luXG4gICAgdmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbjogVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvblxuXG4gICAgc3RhdGljIGJ1aWxkKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgRmlsZU9wZW5IYW5kbGVyKHBsdWdpbik7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZS5iaW5kKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24gPSBwbHVnaW4udmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbjtcbiAgICB9XG5cbiAgICBhc3luYyBoYW5kbGUoZmlsZTogVEZpbGUgfCBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdIYW5kbGUgRmlsZSBPcGVuJyk7XG5cbiAgICAgICAgaWYgKGZpbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlLmV4dGVuc2lvbiAhPT0gJ21kJyAmJiBmaWxlLmV4dGVuc2lvbiAhPT0gJ2NhbnZhcycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbi51cGRhdGUoYnVpbGRGb2xkZXJOYW1lKHRoaXMucGx1Z2luLnNldHRpbmdzLCBmaWxlLm5hbWUpKVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgVEZpbGUsIFZhdWx0LCBGaWxlU3lzdGVtQWRhcHRlciB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCAqIGFzIFBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCIuLi9QbHVnaW5cIlxuaW1wb3J0IHsgVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1ZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb25cIlxuaW1wb3J0IHsgYnVpbGRGb2xkZXJOYW1lLCBjb250YWluc0ZpbGVuYW1lIH0gZnJvbSBcIi4uL1NldHRpbmdzXCJcblxuZXhwb3J0IGNsYXNzIERlbGV0ZUhhbmRsZXIge1xuICAgIHZhdWx0OiBWYXVsdFxuICAgIHBsdWdpbjogUGx1Z2luXG4gICAgYWRhcHRlcjogRmlsZVN5c3RlbUFkYXB0ZXJcbiAgICB2YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uOiBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXG5cbiAgICBzdGF0aWMgYnVpbGQocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBEZWxldGVIYW5kbGVyKHBsdWdpbik7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZS5iaW5kKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMudmF1bHQgPSBwbHVnaW4uYXBwLnZhdWx0O1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5hZGFwdGVyID0gcGx1Z2luLmFkYXB0ZXI7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiA9IHBsdWdpbi52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGhhbmRsZShmaWxlOiBURmlsZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnSGFuZGxlIERlbGV0ZScpO1xuXG4gICAgICAgIGlmIChmaWxlLmV4dGVuc2lvbiAhPT0gJ21kJyAmJiBmaWxlLmV4dGVuc2lvbiAhPT0gJ2NhbnZhcycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFx1NjcyQVx1NTMwNVx1NTQyQiBmaWxlbmFtZVx1RkYwQ1x1OEJGNFx1NjYwRVx1NEUwRFx1NjYyRlx1NkJDRlx1NEUyQVx1NjU4N1x1NEVGNlx1NEUwMFx1NEUyQVx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1RkYwOFx1NEUwRFx1ODBGRFx1NTIyMFx1OTY2NFx1RkYwOVxuICAgICAgICBpZiAoIWNvbnRhaW5zRmlsZW5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MpIHx8ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvRGVsZXRlRm9sZGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gUGF0aC5qb2luKFBhdGguZGlybmFtZShmaWxlLnBhdGgpLCBidWlsZEZvbGRlck5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MsIGZpbGUubmFtZSkpO1xuXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmFkYXB0ZXIuZXhpc3RzKGZvbGRlclBhdGgpKSB7XG5cbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgdHJhc2hPcHRpb24gPSB0aGlzLnZhdWx0LmdldENvbmZpZyhcInRyYXNoT3B0aW9uXCIpO1xuXG4gICAgICAgICAgICBpZiAodHJhc2hPcHRpb24gPT09IFwic3lzdGVtXCIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkYXB0ZXIudHJhc2hTeXN0ZW0oZm9sZGVyUGF0aCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyYXNoT3B0aW9uID09PSBcImxvY2FsXCIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkYXB0ZXIudHJhc2hMb2NhbChmb2xkZXJQYXRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGFwdGVyLnJlbW92ZShmb2xkZXJQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWxldGVkJywgZm9sZGVyUGF0aClcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgVEZpbGUsIFRBYnN0cmFjdEZpbGUsIFZhdWx0LCBGaWxlTWFuYWdlciwgRmlsZVN5c3RlbUFkYXB0ZXIsIG5vcm1hbGl6ZVBhdGggfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwiLi4vUGx1Z2luXCJcbmltcG9ydCB7IFZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9WYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXCJcbmltcG9ydCB7IGJ1aWxkRm9sZGVyTmFtZSwgY29udGFpbnNGaWxlbmFtZSB9IGZyb20gXCIuLi9TZXR0aW5nc1wiXG5cbmV4cG9ydCBjbGFzcyBSZW5hbWVIYW5kbGVyIHtcbiAgICB2YXVsdDogVmF1bHRcbiAgICBwbHVnaW46IFBsdWdpblxuICAgIGFkYXB0ZXI6IEZpbGVTeXN0ZW1BZGFwdGVyXG4gICAgZmlsZU1hbmFnZXI6IEZpbGVNYW5hZ2VyXG4gICAgdmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbjogVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvblxuXG4gICAgc3RhdGljIGJ1aWxkKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgUmVuYW1lSGFuZGxlcihwbHVnaW4pO1xuICAgICAgICByZXR1cm4gaGFuZGxlci5oYW5kbGUuYmluZChoYW5kbGVyKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnZhdWx0ID0gcGx1Z2luLmFwcC52YXVsdDtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuYWRhcHRlciA9IHBsdWdpbi5hZGFwdGVyO1xuICAgICAgICB0aGlzLmZpbGVNYW5hZ2VyID0gcGx1Z2luLmFwcC5maWxlTWFuYWdlcjtcbiAgICAgICAgdGhpcy52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uID0gcGx1Z2luLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb247XG4gICAgfVxuXG4gICAgYXN5bmMgaGFuZGxlKG5ld0ZpbGU6IFRBYnN0cmFjdEZpbGUsIG9sZEZpbGVQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0hhbmRsZSBSZW5hbWUnKTtcblxuICAgICAgICBpZiAoIShuZXdGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3RmlsZS5leHRlbnNpb24gIT09ICdtZCcgJiYgbmV3RmlsZS5leHRlbnNpb24gIT09ICdjYW52YXMnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBcdTY3MkFcdTUzMDVcdTU0MkIgZmlsZW5hbWVcdUZGMENcdThCRjRcdTY2MEVcdTRFMERcdTY2MkZcdTZCQ0ZcdTRFMkEgbWQgXHU2NTg3XHU0RUY2XHU0RTAwXHU0RTJBXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XG4gICAgICAgIGlmICghY29udGFpbnNGaWxlbmFtZSh0aGlzLnBsdWdpbi5zZXR0aW5ncykgfHwgIXRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9SZW5hbWVGb2xkZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdGb2xkZXJOYW1lID0gYnVpbGRGb2xkZXJOYW1lKHRoaXMucGx1Z2luLnNldHRpbmdzLCBuZXdGaWxlLm5hbWUpO1xuICAgICAgICB0aGlzLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24udXBkYXRlKG5ld0ZvbGRlck5hbWUpXG4gICAgICAgIGNvbnN0IG5ld0ZvbGRlclBhdGggPSBub3JtYWxpemVQYXRoKFBhdGguam9pbihQYXRoLmRpcm5hbWUobmV3RmlsZS5wYXRoKSwgbmV3Rm9sZGVyTmFtZSkpO1xuXG4gICAgICAgIGNvbnN0IG9sZEZvbGRlclBhdGggPSBub3JtYWxpemVQYXRoKFBhdGguam9pbihQYXRoLmRpcm5hbWUob2xkRmlsZVBhdGgpLCBidWlsZEZvbGRlck5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MsIFBhdGguYmFzZW5hbWUob2xkRmlsZVBhdGgpKSkpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuX3JlbmFtZUZvbGRlcihvbGRGb2xkZXJQYXRoLCBuZXdGb2xkZXJQYXRoKTtcblxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9SZW5hbWVGaWxlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gXHU4MDAxXHU3Njg0XHU2NTg3XHU0RUY2XHU1NDBEXHU0RTJEXHU1MjU0XHU5NjY0XHU1NDBFXHU3RjAwXHVGRjA4XHU1MDQ3XHU1QjlBIHJlbmFtZSBcdTU0MEVcdTdGMDBcdTRFMERcdTRGMUFcdTUzRDhcdTUzMTZcdUZGMDlcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVuYW1lRmlsZXMobmV3Rm9sZGVyUGF0aCwgbmV3RmlsZS5iYXNlbmFtZSwgUGF0aC5iYXNlbmFtZShvbGRGaWxlUGF0aCwgXCIuXCIgKyBuZXdGaWxlLmV4dGVuc2lvbikpXG4gICAgfVxuXG4gICAgYXN5bmMgX3JlbmFtZUZvbGRlcihvbGRGb2xkZXJQYXRoOiBzdHJpbmcsIG5ld0ZvbGRlclBhdGg6IHN0cmluZykge1xuICAgICAgICBpZiAoYXdhaXQgIXRoaXMuYWRhcHRlci5leGlzdHMob2xkRm9sZGVyUGF0aCkgfHwgb2xkRm9sZGVyUGF0aCA9PT0gbmV3Rm9sZGVyUGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9sZEZvbGRlciA9IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9sZEZvbGRlclBhdGgpO1xuXG4gICAgICAgIGlmIChvbGRGb2xkZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5maWxlTWFuYWdlci5yZW5hbWVGaWxlKG9sZEZvbGRlciwgbmV3Rm9sZGVyUGF0aCk7XG5cbiAgICAgICAgLy8gXHU3MjM2XHU2NTg3XHU0RUY2XHU1OTM5XHU0RTNBXHU3QTdBXHU2NUY2XHVGRjBDXHU5ODdBXHU0RkJGXHU1MjIwXHU5NjY0XHU3MjM2XHU2NTg3XHU0RUY2XHU1OTM5XG4gICAgICAgIGNvbnN0IG9sZEZvbGRlclBhcmVudFBhdGggPSBQYXRoLmRpcm5hbWUob2xkRm9sZGVyUGF0aCk7XG4gICAgICAgIGNvbnN0IG9sZEZvbGRlclBhcmVudExpc3RlZEZpbGVzID0gYXdhaXQgdGhpcy5hZGFwdGVyLmxpc3Qob2xkRm9sZGVyUGFyZW50UGF0aCk7XG4gICAgICAgIGlmIChvbGRGb2xkZXJQYXJlbnRMaXN0ZWRGaWxlcy5mb2xkZXJzLmxlbmd0aCA9PT0gMCAmJiBvbGRGb2xkZXJQYXJlbnRMaXN0ZWRGaWxlcy5maWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRhcHRlci5ybWRpcihvbGRGb2xkZXJQYXJlbnRQYXRoLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9yZW5hbWVGaWxlcyhuZXdGb2xkZXJQYXRoOiBzdHJpbmcsIG5ld0ZpbGVOYW1lOiBzdHJpbmcsIG9sZEZpbGVOYW1lOiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCBhdHRhY2htZW50RmlsZXMgPSAoYXdhaXQgdGhpcy5hZGFwdGVyLmxpc3QobmV3Rm9sZGVyUGF0aCkpLmZpbGVzO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBhdHRhY2htZW50RmlsZXMpIHtcblxuICAgICAgICAgICAgbGV0IGF0dGFjaG1lbnRGaWxlTmFtZSA9IFBhdGguYmFzZW5hbWUoZmlsZSk7XG5cbiAgICAgICAgICAgIGlmICghYXR0YWNobWVudEZpbGVOYW1lLmNvbnRhaW5zKG9sZEZpbGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRhY2htZW50RmlsZU5hbWUgPSBhdHRhY2htZW50RmlsZU5hbWUucmVwbGFjZShvbGRGaWxlTmFtZSwgbmV3RmlsZU5hbWUpO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdGaWxlUGF0aCA9IG5vcm1hbGl6ZVBhdGgoUGF0aC5qb2luKG5ld0ZvbGRlclBhdGgsIGF0dGFjaG1lbnRGaWxlTmFtZSkpO1xuXG4gICAgICAgICAgICBjb25zdCBhdHRhY2htZW50RmlsZSA9IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGUpO1xuICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnRGaWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmlsZU1hbmFnZXIucmVuYW1lRmlsZShhdHRhY2htZW50RmlsZSwgbmV3RmlsZVBhdGgpO1xuICAgICAgICB9XG4gICAgfVxufSIsICJpbXBvcnQgeyBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJy4uL1BsdWdpbidcbmltcG9ydCB7IGxhbmcgfSBmcm9tICcuLi9sYW5nJ1xuaW1wb3J0IHsgYnVpbGRGb2xkZXJSZWdFeHAgfSBmcm9tICcuLi9TZXR0aW5ncydcblxuZXhwb3J0IGNsYXNzIEhpZGVGb2xkZXIge1xuICAgIHBsdWdpbjogUGx1Z2luXG4gICAgcmliYm9uSWNvbkJ1dHRvbjogSFRNTEVsZW1lbnQ7XG4gICAgc3RhdHVzQmFySXRlbTogSFRNTEVsZW1lbnQ7XG4gICAgbXV0YXRpb25PYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBpY29uIGluIHRoZSBsZWZ0IHJpYmJvbi5cbiAgICAgICAgdGhpcy5yaWJib25JY29uQnV0dG9uID0gdGhpcy5wbHVnaW4uYWRkUmliYm9uSWNvbihcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPyBcImV5ZS1vZmZcIiA6IFwiZXllXCIsXG4gICAgICAgICAgICBsYW5nLmdldChcImNvbW1hbmRfdG9nZ2xlX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIiksXG4gICAgICAgICAgICAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlciA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlRm9sZGVyO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHN0YXR1cyBiYXIgaXRlbSB0byB0aGUgYm90dG9tIG9mIHRoZSBhcHAuIERvZXMgbm90IHdvcmsgb24gbW9iaWxlIGFwcHMuXG4gICAgICAgIHRoaXMuc3RhdHVzQmFySXRlbSA9IHRoaXMucGx1Z2luLmFkZFN0YXR1c0Jhckl0ZW0oKTtcbiAgICAgICAgdGhpcy5zdGF0dXNCYXJJdGVtLnNldFRleHQodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlciA/IFwiQXR0YWNobWVudCBmb2xkZXJzIGFyZSBoaWRkZW5cIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIGNvbW1hbmQgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFueXdoZXJlXG4gICAgICAgIHRoaXMucGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6IFwidG9nZ2xlLWF0dGFjaG1lbnQtZm9sZGVyX3Zpc2liaWxpdHlcIixcbiAgICAgICAgICAgIG5hbWU6IGxhbmcuZ2V0KFwiY29tbWFuZF90b2dnbGVfYXR0YWNobWVudF9mb2xkZXJfdmlzaWJpbGl0eVwiKSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlciA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlRm9sZGVyO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9uUmVjb3JkKSA9PiB7XG4gICAgICAgICAgICBtdXRhdGlvblJlY29yZC5mb3JFYWNoKHJlY29yZCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC50YXJnZXQ/LnBhcmVudEVsZW1lbnQ/LmNsYXNzTGlzdC5jb250YWlucyhcIm5hdi1mb2xkZXJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoRm9sZGVycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUod2luZG93LmRvY3VtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBhc3luYyByZWZyZXNoKCkge1xuICAgICAgICBzZXRJY29uKHRoaXMucmliYm9uSWNvbkJ1dHRvbiwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlciA/IFwiZXllLW9mZlwiIDogXCJleWVcIik7XG4gICAgICAgIHRoaXMuc3RhdHVzQmFySXRlbS5pbm5lckhUTUwgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlRm9sZGVyID8gbGFuZy5nZXQoXCJzdGF0dXNfYXR0YWNobWVudF9mb2xkZXJfdmlzaWJpbGl0eVwiKSA6IFwiXCI7XG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaEZvbGRlcnMoKTtcbiAgICB9XG5cbiAgICBhc3luYyByZWZyZXNoRm9sZGVycygpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gYnVpbGRGb2xkZXJSZWdFeHAodGhpcy5wbHVnaW4uc2V0dGluZ3MpO1xuXG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdi1mb2xkZXItdGl0bGUtY29udGVudFwiKTtcblxuICAgICAgICBmb2xkZXJzLmZvckVhY2goKGZvbGRlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZm9sZGVyTmFtZSA9IGZvbGRlci5pbm5lckhUTUw7XG4gICAgICAgICAgICBpZiAoZmlsdGVyLnRlc3QoZm9sZGVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICBmb2xkZXIucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudD8uYWRkQ2xhc3MoXCJoaWRlLWF0dGFjaG1lbnQtZm9sZGVyXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlci5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50Py5yZW1vdmVDbGFzcyhcImhpZGUtYXR0YWNobWVudC1mb2xkZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hZXJvRm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlci5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50Py5hZGRDbGFzcyhcImFlcm8tYXR0YWNobWVudC1mb2xkZXJcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9sZGVyLnBhcmVudEVsZW1lbnQ/LnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNsYXNzKFwiYWVyby1hdHRhY2htZW50LWZvbGRlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdW5sb2FkKCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgV29ya3NwYWNlLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgRmlsZU1hbmFnZXIsIG5vcm1hbGl6ZVBhdGgsIFRleHRGaWxlVmlldywgRmlsZVN5c3RlbUFkYXB0ZXIsIFZhdWx0IH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgUGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIi4uL1BsdWdpblwiXG5pbXBvcnQgeyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvblwiXG5pbXBvcnQgeyBidWlsZEZvbGRlck5hbWUsIGJ1aWxkUGFzdGVkSW1hZ2VOYW1lIH0gZnJvbSBcIi4uL1NldHRpbmdzXCJcblxuZXhwb3J0IGNsYXNzIENyZWF0ZUhhbmRsZXIge1xuICAgIHZhdWx0OiBWYXVsdFxuICAgIHBsdWdpbjogUGx1Z2luXG4gICAgd29ya3NwYWNlOiBXb3Jrc3BhY2VcbiAgICBmaWxlTWFuYWdlcjogRmlsZU1hbmFnZXJcbiAgICB2YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uOiBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXG5cbiAgICBzdGF0aWMgYnVpbGQocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDcmVhdGVIYW5kbGVyKHBsdWdpbik7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZS5iaW5kKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMudmF1bHQgPSBwbHVnaW4uYXBwLnZhdWx0O1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2UgPSBwbHVnaW4uYXBwLndvcmtzcGFjZTtcbiAgICAgICAgdGhpcy5maWxlTWFuYWdlciA9IHBsdWdpbi5hcHAuZmlsZU1hbmFnZXI7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiA9IHBsdWdpbi52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGhhbmRsZShmaWxlOiBUQWJzdHJhY3RGaWxlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdIYW5kbGUgRmlsZSBDcmVhdGUnKTtcblxuICAgICAgICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBcdTk3NUVcdTdDOThcdThEMzRcdTc2ODRcdTU2RkVcdTcyNDdcdUZGMENcdThGRDRcdTU2REVcbiAgICAgICAgaWYgKCFmaWxlLm5hbWUuc3RhcnRzV2l0aChcIlBhc3RlZCBpbWFnZSBcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKFRleHRGaWxlVmlldyk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSBhY3RpdmVWaWV3Py5maWxlO1xuXG4gICAgICAgIGlmICghYWN0aXZlRmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFjdGl2ZSB0ZXh0IGZpbGUsIGBtZGAgb3IgYGNhbnZhc2BcbiAgICAgICAgaWYgKGFjdGl2ZUZpbGUuZXh0ZW5zaW9uICE9PSAnbWQnICYmIGFjdGl2ZUZpbGUuZXh0ZW5zaW9uICE9PSAnY2FudmFzJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IFBhdGguam9pbihQYXRoLmRpcm5hbWUoYWN0aXZlRmlsZS5wYXRoKSwgYnVpbGRGb2xkZXJOYW1lKHRoaXMucGx1Z2luLnNldHRpbmdzLCBhY3RpdmVGaWxlLm5hbWUpKTtcblxuICAgICAgICAvLyBcdTRFMERcdTU3MjhcdTZGQzBcdTZEM0JcdTY1ODdcdTRFRjZcdTc2ODRcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTRFMkRcbiAgICAgICAgaWYgKCFmaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXJQYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gXHU2NUIwXHU3Njg0XHU2NTg3XHU0RUY2XHU1NDBEXG4gICAgICAgIGNvbnN0IGltYWdlUGF0aCA9IG5vcm1hbGl6ZVBhdGgoUGF0aC5qb2luKGZvbGRlclBhdGgsIGJ1aWxkUGFzdGVkSW1hZ2VOYW1lKHRoaXMucGx1Z2luLnNldHRpbmdzLCBhY3RpdmVGaWxlLmJhc2VuYW1lKSArIFwiLlwiICsgZmlsZS5leHRlbnNpb24pKTtcblxuICAgICAgICBpZiAoYWN0aXZlRmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmFtZTRNRChmaWxlLCBpbWFnZVBhdGgsIGFjdGl2ZVZpZXcsIGFjdGl2ZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmVGaWxlLmV4dGVuc2lvbiA9PT0gJ2NhbnZhcycpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmFtZTRDYW52YXMoZmlsZSwgaW1hZ2VQYXRoLCBhY3RpdmVWaWV3KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9yZW5hbWU0TUQoZmlsZTogVEZpbGUsIG5ld1BhdGg6IHN0cmluZywgYWN0aXZlVmlldzogVGV4dEZpbGVWaWV3LCBhY3RpdmVGaWxlOiBURmlsZSkge1xuICAgICAgICBjb25zdCBvbGRMaW5rVGV4dCA9IHRoaXMuZmlsZU1hbmFnZXIuZ2VuZXJhdGVNYXJrZG93bkxpbmsoZmlsZSwgYWN0aXZlRmlsZS5wYXRoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5maWxlTWFuYWdlci5yZW5hbWVGaWxlKGZpbGUsIG5ld1BhdGgpO1xuICAgICAgICBjb25zdCBuZXdMaW5rVGV4dCA9IHRoaXMuZmlsZU1hbmFnZXIuZ2VuZXJhdGVNYXJrZG93bkxpbmsoZmlsZSwgYWN0aXZlRmlsZS5wYXRoKTtcblxuICAgICAgICBsZXQgY29udGVudCA9IGFjdGl2ZVZpZXcuZ2V0Vmlld0RhdGEoKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShvbGRMaW5rVGV4dCwgbmV3TGlua1RleHQpO1xuICAgICAgICBhY3RpdmVWaWV3LnNldFZpZXdEYXRhKGNvbnRlbnQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBfcmVuYW1lNENhbnZhcyhmaWxlOiBURmlsZSwgbmV3UGF0aDogc3RyaW5nLCBhY3RpdmVWaWV3OiBUZXh0RmlsZVZpZXcpIHtcbiAgICAgICAgY29uc3Qgb2xkUGF0aCA9IGZpbGUucGF0aDtcbiAgICAgICAgYXdhaXQgdGhpcy5maWxlTWFuYWdlci5yZW5hbWVGaWxlKGZpbGUsIG5ld1BhdGgpO1xuXG4gICAgICAgIGxldCBjb250ZW50ID0gYWN0aXZlVmlldy5nZXRWaWV3RGF0YSgpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKGAvKGZpbGVcXFxccypcXFxcOlxcXFxzKlxcXFxcIikke29sZFBhdGh9KFxcXFxcIikvZ2AsIGAkMSR7bmV3UGF0aH0kMmApO1xuICAgICAgICBhY3RpdmVWaWV3LnNldFZpZXdEYXRhKGNvbnRlbnQsIGZhbHNlKTtcbiAgICB9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBLElBQUFBLG1CQUE0RDs7O0FDQTVELHNCQUF1QjtBQWF2QixJQUFNLFlBQVk7QUFDbEIsSUFBTSxZQUFZO0FBQ2xCLElBQU0sWUFBWTtBQUVYLElBQU0sbUJBQTZCO0FBQUEsRUFDdEMsWUFBWSxHQUFHO0FBQUEsRUFDZixpQkFBaUIsR0FBRyxhQUFhO0FBQUEsRUFDakMsZ0JBQWdCO0FBQUEsRUFDaEIsWUFBWTtBQUFBLEVBQ1osWUFBWTtBQUFBLEVBQ1osa0JBQWtCO0FBQUEsRUFDbEIsaUJBQWlCO0FBQUEsRUFDakIsa0JBQWtCO0FBQ3RCO0FBRU8sSUFBTSxtQkFBbUIsQ0FBQyxhQUF1QjtBQUNwRCxTQUFPLFNBQVMsV0FBVyxTQUFTLFNBQVM7QUFDakQ7QUFFQSxJQUFNLFNBQVMsQ0FBQyxTQUFpQjtBQUU3QixRQUFNLG9CQUFvQixDQUFDLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxRQUFRLEtBQUs7QUFFckgsUUFBTSxNQUFNLElBQUksT0FBTyxNQUFNLGtCQUFrQixLQUFLLEVBQUUsSUFBSSxLQUFLLElBQUk7QUFFbkUsU0FBTyxLQUFLLFFBQVEsS0FBSyxDQUFDLGNBQXNCLEtBQUssV0FBVztBQUNwRTtBQUVPLElBQU0sb0JBQW9CLENBQUMsYUFBdUI7QUFDckQsTUFBSSxNQUFNLE9BQU8sU0FBUyxVQUFVO0FBQ3BDLFFBQU0sSUFBSSxRQUFRLE9BQU8sU0FBUyxHQUFHLElBQUk7QUFDekMsU0FBTyxJ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LFNBQVM7QUFDWCxZQUFRLElBQUksZ0JBQWdCO0FBRTVCLFNBQUssVUFBVSxLQUFLLElBQUksTUFBTTtBQUM5QixTQUFLLCtCQUErQixJQUFJLDZCQUE2QixLQUFLLElBQUksS0FBSztBQUNuRixTQUFLLDZCQUE2QixPQUFPO0FBRXpDLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBRXpFLFNBQUssY0FBYyxJQUFJLFdBQVcsS0FBSyxLQUFLLElBQUksQ0FBQztBQUdqRCxTQUFLLGNBQWMsS0FBSyxJQUFJLFVBQVUsR0FBRyxhQUFhLGdCQUFnQixNQUFNLElBQUksQ0FBQyxDQUFDO0FBRWxGLFNBQUssY0FBYyxLQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsY0FBYyxNQUFNLElBQUksQ0FBQyxDQUFDO0FBRXpFLFNBQUssY0FBYyxLQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsY0FBYyxNQUFNLElBQUksQ0FBQyxDQUFDO0FBRXpFLFNBQUssY0FBYyxLQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsY0FBYyxNQUFNLElBQUksQ0FBQyxDQUFDO0FBRXpFLFNBQUssYUFBYSxJQUFJLFdBQVcsSUFBSTtBQUNyQyxTQUFLLFdBQVcsS0FBSztBQUFBLEVBQ3pCO0FBQUEsRUFFQSxXQUFXO0FBQ1AsWUFBUSxJQUFJLGtCQUFrQjtBQUM5QixTQUFLLDZCQUE2QixRQUFRO0FBQzFDLFNBQUssV0FBVyxPQUFPO0FBQUEsRUFDM0I7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNqQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNyQztBQUNKOzs7QURoREEsSUFBTyxlQUFROyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJQYXRoIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiUGF0aCIsICJPYnNpZGlhblBsdWdpbiJdCn0K
