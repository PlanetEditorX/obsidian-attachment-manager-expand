/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/Plugin.ts
var import_obsidian5 = require("obsidian");

// src/Settings.ts
var import_obsidian = require("obsidian");
var _filename = "${filename}";
var _datetime = "${datetime}";
var DEFAULT_SETTINGS = {
  folderName: `${_filename}.md_Attachments`,
  pastedImageFileName: `${_filename}-${_datetime}`,
  datetimeFormat: "YYYYMMDDHHmmssSSS",
  hideFolder: false,
  autoRenameFolder: true,
  autoRenameFiles: false,
  autoDeleteFolder: false
};
var containsFilename = (settings) => {
  return settings.folderName.contains(_filename);
};
var encode = (text) => {
  const specialCharacters = ["\\$", "\\[", "\\]", "\\{", "\\}", "\\(", "\\)", "\\*", "\\+", "\\.", "\\?", "\\\\", "\\^"];
  const reg = new RegExp("[" + specialCharacters.join("") + "]", "gi");
  return text.replace(reg, (character) => `\\${character}`);
};
var buildFolderRegExp = (settings) => {
  let reg = encode(settings.folderName);
  reg = reg.replace(encode(_filename), ".+");
  return new RegExp("^" + reg + "$");
};
var buildFolderName = (settings, fileName) => {
  return "./" + settings.folderName.replace(_filename, fileName);
};
var buildPastedImageFileName = (settings, fileName) => {
  const datetime = (0, import_obsidian.moment)().format(settings.datetimeFormat);
  return settings.pastedImageFileName.replace(_filename, fileName).replace(_datetime, datetime);
};

// src/SettingTab.ts
var import_obsidian2 = require("obsidian");

// src/lang/zh.ts
var zh_default = {
  "plugin_name": "\u9644\u4EF6\u7BA1\u7406\u5668",
  "settings_folder_name": "\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_folder_name_desc": "\u9644\u4EF6\u6587\u4EF6\u5939\u7684\u540D\u79F0\uFF0C\u4F7F\u7528\u53D8\u91CF ${filename} \u83B7\u53D6\u7B14\u8BB0\u7684\u540D\u79F0\uFF0C\u4F8B\uFF1A${filename}.md_Attachments\u3002",
  "settings_pasted_image_file_name": "\u201C\u7C98\u8D34\u56FE\u7247\u201D\u6587\u4EF6\u540D",
  "settings_pasted_image_file_name_desc": "\u201C\u7C98\u8D34\u56FE\u7247\u201D\u4FDD\u5B58\u4E3A\u6587\u4EF6\u7684\u540D\u79F0\uFF0C\u4F7F\u7528\u53D8\u91CF ${filename} \u83B7\u53D6 md \u6587\u4EF6\u7684\u540D\u79F0\uFF0C\u4F7F\u7528\u53D8\u91CF ${datetime} \u83B7\u53D6\u65F6\u95F4\uFF0C\u4F8B\uFF1A${notename}-${datetime}\u3002",
  "settings_datetime_format": "${datetime} \u683C\u5F0F",
  "settings_datetime_format_desc": "Moment \u683C\u5F0F\uFF0C\u4F8B\uFF1AYYYYMMDDHHmmssSSS\u3002",
  "settings_hide_folder": "\u9690\u85CF\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_auto_rename_folder": "\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_auto_rename_folder_desc": ".md \u6587\u4EF6\u540D\u79F0\u53D8\u5316\u65F6\uFF0C\u5982\u679C\u9644\u4EF6\u6587\u4EF6\u5939\u540D\u79F0\u4E2D\u5305\u542B\u201C${filename}\u201D\uFF0C\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6\u5939\u3002",
  "settings_auto_rename_files": "\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6",
  "settings_auto_rename_files_desc": ".md \u6587\u4EF6\u540D\u79F0\u53D8\u5316\u65F6\uFF0C\u5982\u679C\u9644\u4EF6\u6587\u4EF6\u540D\u79F0\u4E2D\u5305\u542B\u201C${filename}\u201D\uFF0C\u81EA\u52A8\u91CD\u547D\u540D\u9644\u4EF6\u6587\u4EF6\u3002",
  "settings_auto_delete_folder": "\u81EA\u52A8\u5220\u9664\u9644\u4EF6\u6587\u4EF6\u5939",
  "settings_auto_delete_folder_desc": ".md \u6587\u4EF6\u5220\u9664\u65F6\uFF0C\u5982\u679C\u9644\u4EF6\u6587\u4EF6\u5939\u540D\u79F0\u4E2D\u5305\u542B\u201C${filename}\u201D\uFF0C\u81EA\u52A8\u5220\u9664\u9644\u4EF6\u6587\u4EF6\u5939\u3002",
  "command_toggle_attachment_folder_visibility": "\u5207\u6362\u9644\u4EF6\u6587\u4EF6\u5939\u7684\u201C\u663E\u793A/\u9690\u85CF\u201D",
  "status_attachment_folder_visibility": "\u9644\u4EF6\u6587\u4EF6\u5939\u5DF2\u9690\u85CF"
};

// src/lang/en.ts
var en_default = {
  "plugin_name": "Attachment Manager",
  "settings_folder_name": "Attachment Folder",
  "settings_folder_name_desc": "The name of the attachment folder, using the variable ${filename} to get the name of the note (e.g., ${filename}.md_Attachments).",
  "settings_pasted_image_file_name": "Pasted Image Name",
  "settings_pasted_image_file_name_desc": '"Pasted Image" file name, using the variable ${filename} to get the name of the md file, using the variable ${datetime} to get datetime (e.g., ${notename}-${datetime}).',
  "settings_datetime_format": "${datetime} Format",
  "settings_datetime_format_desc": "Moment format (e.g., YYYYMMDDHHmmssSSS).",
  "settings_hide_folder": "Hide attachment folder",
  "settings_auto_rename_folder": "Automatically rename attachment folder",
  "settings_auto_rename_folder_desc": 'When renaming md files, automatically rename attachment folder if folder name contains "${filename}".',
  "settings_auto_rename_files": "Automatically rename attachment files",
  "settings_auto_rename_files_desc": 'When renaming md files, automatically rename attachment files if file name contains "${filename}".',
  "settings_auto_delete_folder": "Automatically delete attachment folder",
  "settings_auto_delete_folder_desc": 'When deleting md files, automatically delete attachment folder if folder name contains "${filename}".',
  "command_toggle_attachment_folder_visibility": "Toggle visibility of attachment folder",
  "status_attachment_folder_visibility": "Attachment folder are hidden."
};

// src/lang/index.ts
var lang = {
  en: en_default,
  zh: zh_default,
  get(key, ...args) {
    const language = window.localStorage.getItem("language") || "en";
    const _lang = this[language] || en_default;
    let text = _lang[key] || key;
    if (args) {
      for (let i = 0; i < args.length; i++) {
        text = text.replace(new RegExp(`\\{\\{${i}\\}\\}`, "g"), args[i]);
      }
    }
    return text;
  }
};

// src/SettingTab.ts
var SettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_folder_name")).setDesc(lang.get("settings_folder_name_desc")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.folderName).setValue(this.plugin.settings.folderName).onChange(async (value) => {
      value = (0, import_obsidian2.normalizePath)(value);
      this.plugin.settings.folderName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_pasted_image_file_name")).setDesc(lang.get("settings_pasted_image_file_name_desc")).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.pastedImageFileName).setValue(this.plugin.settings.pastedImageFileName).onChange(async (value) => {
      this.plugin.settings.pastedImageFileName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_datetime_format")).setDesc(lang.get("settings_datetime_format_desc")).addMomentFormat((text) => text.setDefaultFormat(DEFAULT_SETTINGS.datetimeFormat).setValue(this.plugin.settings.datetimeFormat).onChange(async (value) => {
      this.plugin.settings.datetimeFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_hide_folder")).addToggle((toggle) => toggle.setValue(this.plugin.settings.hideFolder).onChange(async (value) => {
      this.plugin.settings.hideFolder = value;
      await this.plugin.saveSettings();
      await this.plugin.hideFolder.refresh();
    }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_auto_rename_folder")).setDesc(lang.get("settings_auto_rename_folder_desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoRenameFolder).onChange(async (value) => {
      this.plugin.settings.autoRenameFolder = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.autoRenameFolder)
      new import_obsidian2.Setting(containerEl).setName(lang.get("settings_auto_rename_files")).setDesc(lang.get("settings_auto_rename_files_desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoRenameFiles).onChange(async (value) => {
        this.plugin.settings.autoRenameFiles = value;
        await this.plugin.saveSettings();
      }));
    new import_obsidian2.Setting(containerEl).setName(lang.get("settings_auto_delete_folder")).setDesc(lang.get("settings_auto_delete_folder_desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoDeleteFolder).onChange(async (value) => {
      this.plugin.settings.autoDeleteFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/components/VaultAttachmentConfiguration.ts
var VaultAttachmentConfiguration = class {
  constructor(vault) {
    this.key = "attachmentFolderPath";
    this.vault = vault;
  }
  backup() {
    this._value = this.vault.getConfig(this.key);
  }
  update(value) {
    this.vault.setConfig(this.key, value);
  }
  restore() {
    this.update(this._value);
  }
};

// src/handler/EditorPasteHandler.ts
var EditorPasteHandler = class {
  static build(plugin) {
    const handler = new EditorPasteHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.app = plugin.app;
    this.plugin = plugin;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(event, editor, view) {
    console.log("Handle Paste");
    const mdFile = view.file;
    if (!mdFile) {
      return;
    }
    const clipboardData = event.clipboardData;
    if (!clipboardData) {
      return;
    }
    if (clipboardData.getData("text/plain")) {
      return;
    }
    const clipboardItems = clipboardData.items;
    if (!clipboardData.items) {
      return;
    }
    const mdFileName = mdFile.basename;
    this.vaultAttachmentConfiguration.update(buildFolderName(this.plugin.settings, mdFileName));
    for (const i in clipboardItems) {
      if (!clipboardItems.hasOwnProperty(i))
        continue;
      const item = clipboardItems[i];
      if (item.kind !== "file") {
        continue;
      }
      if (item.type !== "image/png" && item.type !== "image/jpeg") {
        continue;
      }
      const pasteImage = item.getAsFile();
      if (!pasteImage) {
        continue;
      }
      event.preventDefault();
      const imageFile = await this.app.saveAttachment(
        buildPastedImageFileName(this.plugin.settings, mdFileName),
        item.type === "image/png" ? "png" : item.type === "image/jpeg" ? "jpeg" : "",
        await this._blobToArrayBuffer(pasteImage)
      );
      editor.replaceSelection(await this.app.fileManager.generateMarkdownLink(imageFile, mdFile.path));
    }
  }
  _blobToArrayBuffer(blob) {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.readAsArrayBuffer(blob);
    });
  }
};

// src/handler/EditorDropHandler.ts
var EditorDropHandler = class {
  static build(plugin) {
    const handler = new EditorDropHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.plugin = plugin;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(event, editor, view) {
    console.log("Handle Drop");
    const mdFile = view.file;
    if (!mdFile) {
      return;
    }
    this.vaultAttachmentConfiguration.update(buildFolderName(this.plugin.settings, mdFile.basename));
  }
};

// src/handler/FileOpenHandler.ts
var FileOpenHandler = class {
  static build(plugin) {
    const handler = new FileOpenHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.plugin = plugin;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(file) {
    console.log("Handle File Open");
    if (file == null || file.extension !== "md") {
      return;
    }
    this.vaultAttachmentConfiguration.update(buildFolderName(this.plugin.settings, file.basename));
  }
};

// src/handler/DeleteHandler.ts
var Path = __toESM(require("path"));
var DeleteHandler = class {
  static build(plugin) {
    const handler = new DeleteHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.vault = plugin.app.vault;
    this.plugin = plugin;
    this.adapter = plugin.adapter;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(file) {
    console.log("Handle Delete");
    if (file.extension !== "md") {
      return;
    }
    if (!containsFilename(this.plugin.settings) || !this.plugin.settings.autoDeleteFolder) {
      return;
    }
    const folderPath = Path.join(Path.dirname(file.path), buildFolderName(this.plugin.settings, file.basename));
    if (await this.adapter.exists(folderPath)) {
      const trashOption = this.vault.getConfig("trashOption");
      if (trashOption === "system") {
        await this.adapter.trashSystem(folderPath);
      } else if (trashOption === "local") {
        await this.adapter.trashLocal(folderPath);
      } else {
        await this.adapter.remove(folderPath);
      }
      console.log("Deleted", folderPath);
    }
  }
};

// src/handler/RenameHandler.ts
var import_obsidian3 = require("obsidian");
var Path2 = __toESM(require("path"));
var RenameHandler = class {
  static build(plugin) {
    const handler = new RenameHandler(plugin);
    return handler.handle.bind(handler);
  }
  constructor(plugin) {
    this.vault = plugin.app.vault;
    this.plugin = plugin;
    this.adapter = plugin.adapter;
    this.fileManager = plugin.app.fileManager;
    this.vaultAttachmentConfiguration = plugin.vaultAttachmentConfiguration;
  }
  async handle(newFile, oldFilePath) {
    console.log("Handle Rename");
    if (newFile.extension !== "md") {
      return;
    }
    if (!containsFilename(this.plugin.settings) || !this.plugin.settings.autoRenameFolder) {
      return;
    }
    const newFileName = newFile.basename;
    const newFolderName = buildFolderName(this.plugin.settings, newFileName);
    this.vaultAttachmentConfiguration.update(newFolderName);
    const newFolderPath = Path2.join(Path2.dirname(newFile.path), newFolderName);
    const oldFileName = Path2.basename(oldFilePath, ".md");
    const oldFolderPath = Path2.join(Path2.dirname(oldFilePath), buildFolderName(this.plugin.settings, oldFileName));
    await this._renameFolder(oldFolderPath, newFolderPath);
    if (!this.plugin.settings.autoRenameFiles) {
      return;
    }
    await this._renameFiles(newFolderPath, newFileName, oldFileName);
  }
  async _renameFolder(oldFolderPath, newFolderPath) {
    if (await !this.adapter.exists(oldFolderPath) || oldFolderPath === newFolderPath) {
      return;
    }
    const oldFolder = this.vault.getAbstractFileByPath(oldFolderPath);
    if (oldFolder == null) {
      return;
    }
    await this.fileManager.renameFile(oldFolder, newFolderPath);
    const oldFolderParentPath = Path2.dirname(oldFolderPath);
    const oldFolderParentListedFiles = await this.adapter.list(oldFolderParentPath);
    if (oldFolderParentListedFiles.folders.length === 0 && oldFolderParentListedFiles.files.length === 0) {
      await this.adapter.rmdir(oldFolderParentPath, true);
    }
  }
  async _renameFiles(newFolderPath, newFileName, oldFileName) {
    const attachmentFiles = (await this.adapter.list(newFolderPath)).files;
    for (const file of attachmentFiles) {
      let attachmentFileName = Path2.basename(file);
      if (!attachmentFileName.contains(oldFileName)) {
        continue;
      }
      attachmentFileName = attachmentFileName.replace(oldFileName, newFileName);
      const newFilePath = (0, import_obsidian3.normalizePath)(Path2.join(newFolderPath, attachmentFileName));
      const attachmentFile = this.vault.getAbstractFileByPath(file);
      if (attachmentFile == null) {
        continue;
      }
      await this.fileManager.renameFile(attachmentFile, newFilePath);
    }
  }
};

// src/components/HideFolder.ts
var import_obsidian4 = require("obsidian");
var HideFolder = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  load() {
    this.ribbonIconButton = this.plugin.addRibbonIcon(
      this.plugin.settings.hideFolder ? "eye-off" : "eye",
      lang.get("command_toggle_attachment_folder_visibility"),
      (evt) => {
        this.plugin.settings.hideFolder = !this.plugin.settings.hideFolder;
        this.plugin.saveSettings();
        this.refresh();
      }
    );
    this.statusBarItem = this.plugin.addStatusBarItem();
    this.statusBarItem.setText(this.plugin.settings.hideFolder ? "Attachment folders are hidden" : "");
    this.plugin.addCommand({
      id: "toggle-attachment-folder_visibility",
      name: lang.get("command_toggle_attachment_folder_visibility"),
      callback: () => {
        this.plugin.settings.hideFolder = !this.plugin.settings.hideFolder;
        this.plugin.saveSettings();
        this.refresh();
      }
    });
    this.mutationObserver = new MutationObserver((mutationRecord) => {
      mutationRecord.forEach((record) => {
        var _a, _b;
        if ((_b = (_a = record.target) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.classList.contains("nav-folder")) {
          this.refreshFolders();
        }
      });
    });
    window.setTimeout(() => {
      this.mutationObserver.observe(window.document, { childList: true, subtree: true });
    }, 1e3);
  }
  async refresh() {
    (0, import_obsidian4.setIcon)(this.ribbonIconButton, this.plugin.settings.hideFolder ? "eye-off" : "eye");
    this.statusBarItem.innerHTML = this.plugin.settings.hideFolder ? lang.get("status_attachment_folder_visibility") : "";
    await this.refreshFolders();
  }
  async refreshFolders() {
    const filter = buildFolderRegExp(this.plugin.settings);
    const folders = document.querySelectorAll(".nav-folder");
    folders.forEach((folder) => {
      const title = folder.querySelector(".nav-folder-title-content");
      const folderName = title == null ? void 0 : title.innerText;
      if (filter.test(folderName)) {
        folder.style.display = this.plugin.settings.hideFolder ? "none" : "";
      }
    });
  }
  unload() {
    this.mutationObserver.disconnect();
  }
};

// src/Plugin.ts
var Plugin = class extends import_obsidian5.Plugin {
  async onload() {
    console.log("loading plugin");
    this.adapter = this.app.vault.adapter;
    this.vaultAttachmentConfiguration = new VaultAttachmentConfiguration(this.app.vault);
    this.vaultAttachmentConfiguration.backup();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("editor-paste", EditorPasteHandler.build(this)));
    this.registerEvent(this.app.workspace.on("editor-drop", EditorDropHandler.build(this)));
    this.registerEvent(this.app.workspace.on("file-open", FileOpenHandler.build(this)));
    this.registerEvent(this.app.vault.on("rename", RenameHandler.build(this)));
    this.registerEvent(this.app.vault.on("delete", DeleteHandler.build(this)));
    this.hideFolder = new HideFolder(this);
    this.hideFolder.load();
  }
  onunload() {
    console.log("unloading plugin");
    this.vaultAttachmentConfiguration.restore();
    this.hideFolder.unload();
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

// main.ts
var main_default = Plugin;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvUGx1Z2luLnRzIiwgInNyYy9TZXR0aW5ncy50cyIsICJzcmMvU2V0dGluZ1RhYi50cyIsICJzcmMvbGFuZy96aC50cyIsICJzcmMvbGFuZy9lbi50cyIsICJzcmMvbGFuZy9pbmRleC50cyIsICJzcmMvY29tcG9uZW50cy9WYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uLnRzIiwgInNyYy9oYW5kbGVyL0VkaXRvclBhc3RlSGFuZGxlci50cyIsICJzcmMvaGFuZGxlci9FZGl0b3JEcm9wSGFuZGxlci50cyIsICJzcmMvaGFuZGxlci9GaWxlT3BlbkhhbmRsZXIudHMiLCAic3JjL2hhbmRsZXIvRGVsZXRlSGFuZGxlci50cyIsICJzcmMvaGFuZGxlci9SZW5hbWVIYW5kbGVyLnRzIiwgInNyYy9jb21wb25lbnRzL0hpZGVGb2xkZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJy4vc3JjL1BsdWdpbic7XG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbjsiLCAiaW1wb3J0IHsgUGx1Z2luIGFzIE9ic2lkaWFuUGx1Z2luLCBGaWxlU3lzdGVtQWRhcHRlciB9IGZyb20gJ29ic2lkaWFuJztcblxuaW1wb3J0IHsgU2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tIFwiLi9TZXR0aW5nc1wiO1xuaW1wb3J0IHsgU2V0dGluZ1RhYiB9IGZyb20gJy4vU2V0dGluZ1RhYic7XG5pbXBvcnQgeyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb21wb25lbnRzL1ZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgRWRpdG9yUGFzdGVIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVyL0VkaXRvclBhc3RlSGFuZGxlcic7XG5pbXBvcnQgeyBFZGl0b3JEcm9wSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlci9FZGl0b3JEcm9wSGFuZGxlcic7XG5pbXBvcnQgeyBGaWxlT3BlbkhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXIvRmlsZU9wZW5IYW5kbGVyJztcbmltcG9ydCB7IERlbGV0ZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXIvRGVsZXRlSGFuZGxlcic7XG5pbXBvcnQgeyBSZW5hbWVIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVyL1JlbmFtZUhhbmRsZXInO1xuaW1wb3J0IHsgSGlkZUZvbGRlciB9IGZyb20gJy4vY29tcG9uZW50cy9IaWRlRm9sZGVyJztcblxuZXhwb3J0IGNsYXNzIFBsdWdpbiBleHRlbmRzIE9ic2lkaWFuUGx1Z2luIHtcbiAgICBzZXR0aW5nczogU2V0dGluZ3NcbiAgICBoaWRlRm9sZGVyOiBIaWRlRm9sZGVyXG4gICAgYWRhcHRlcjogRmlsZVN5c3RlbUFkYXB0ZXJcbiAgICB2YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uOiBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nIHBsdWdpbicpO1xuXG4gICAgICAgIHRoaXMuYWRhcHRlciA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgRmlsZVN5c3RlbUFkYXB0ZXI7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiA9IG5ldyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uKHRoaXMuYXBwLnZhdWx0KTtcbiAgICAgICAgdGhpcy52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uLmJhY2t1cCgpO1xuXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgICAgIC8vIFx1N0M5OFx1OEQzNFx1NTZGRVx1NzI0N1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItcGFzdGUnLCBFZGl0b3JQYXN0ZUhhbmRsZXIuYnVpbGQodGhpcykpKTtcbiAgICAgICAgLy8gXHU2MkQzXHU2MkZEXHU2NTg3XHU0RUY2XHU4MUYzIG1kIFx1NjU4N1x1NEVGNlxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItZHJvcCcsIEVkaXRvckRyb3BIYW5kbGVyLmJ1aWxkKHRoaXMpKSk7XG4gICAgICAgIC8vIFx1NjU4N1x1NEVGNlx1NjI1M1x1NUYwMFxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW9wZW4nLCBGaWxlT3BlbkhhbmRsZXIuYnVpbGQodGhpcykpKTtcbiAgICAgICAgLy8gXHU2NTg3XHU0RUY2XHU5MUNEXHU1NDdEXHU1NDBEXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbigncmVuYW1lJywgUmVuYW1lSGFuZGxlci5idWlsZCh0aGlzKSkpO1xuICAgICAgICAvLyBcdTY1ODdcdTRFRjZcdTUyMjBcdTk2NjRcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLnZhdWx0Lm9uKCdkZWxldGUnLCBEZWxldGVIYW5kbGVyLmJ1aWxkKHRoaXMpKSk7XG5cbiAgICAgICAgdGhpcy5oaWRlRm9sZGVyID0gbmV3IEhpZGVGb2xkZXIodGhpcyk7XG4gICAgICAgIHRoaXMuaGlkZUZvbGRlci5sb2FkKCk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd1bmxvYWRpbmcgcGx1Z2luJyk7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbi5yZXN0b3JlKCk7XG4gICAgICAgIHRoaXMuaGlkZUZvbGRlci51bmxvYWQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IG1vbWVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzIHtcbiAgICBmb2xkZXJOYW1lOiBzdHJpbmc7XG4gICAgcGFzdGVkSW1hZ2VGaWxlTmFtZTogc3RyaW5nO1xuICAgIGRhdGV0aW1lRm9ybWF0OiBzdHJpbmc7XG4gICAgaGlkZUZvbGRlcjogYm9vbGVhbjtcbiAgICBhdXRvUmVuYW1lRm9sZGVyOiBib29sZWFuO1xuICAgIGF1dG9SZW5hbWVGaWxlczogYm9vbGVhbjtcbiAgICBhdXRvRGVsZXRlRm9sZGVyOiBib29sZWFuO1xufVxuXG5jb25zdCBfZmlsZW5hbWUgPSBcIiR7ZmlsZW5hbWV9XCI7XG5jb25zdCBfZGF0ZXRpbWUgPSBcIiR7ZGF0ZXRpbWV9XCI7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBTZXR0aW5ncyA9IHtcbiAgICBmb2xkZXJOYW1lOiBgJHtfZmlsZW5hbWV9Lm1kX0F0dGFjaG1lbnRzYCxcbiAgICBwYXN0ZWRJbWFnZUZpbGVOYW1lOiBgJHtfZmlsZW5hbWV9LSR7X2RhdGV0aW1lfWAsXG4gICAgZGF0ZXRpbWVGb3JtYXQ6ICdZWVlZTU1EREhIbW1zc1NTUycsXG4gICAgaGlkZUZvbGRlcjogZmFsc2UsXG4gICAgYXV0b1JlbmFtZUZvbGRlcjogdHJ1ZSxcbiAgICBhdXRvUmVuYW1lRmlsZXM6IGZhbHNlLFxuICAgIGF1dG9EZWxldGVGb2xkZXI6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgY29udGFpbnNGaWxlbmFtZSA9IChzZXR0aW5nczogU2V0dGluZ3MpID0+IHtcbiAgICByZXR1cm4gc2V0dGluZ3MuZm9sZGVyTmFtZS5jb250YWlucyhfZmlsZW5hbWUpO1xufVxuXG5jb25zdCBlbmNvZGUgPSAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgLy8gXHU3Mjc5XHU2QjhBXHU1QjU3XHU3QjI2XG4gICAgY29uc3Qgc3BlY2lhbENoYXJhY3RlcnMgPSBbXCJcXFxcJFwiLCBcIlxcXFxbXCIsIFwiXFxcXF1cIiwgXCJcXFxce1wiLCBcIlxcXFx9XCIsIFwiXFxcXChcIiwgXCJcXFxcKVwiLCBcIlxcXFwqXCIsIFwiXFxcXCtcIiwgXCJcXFxcLlwiLCBcIlxcXFw/XCIsIFwiXFxcXFxcXFxcIiwgXCJcXFxcXlwiXTtcbiAgICAvLyBcdTcyNzlcdTZCOEFcdTVCNTdcdTdCMjZcdTc2ODRcdTUzMzlcdTkxNERcdTZCNjNcdTUyMTlcbiAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKFwiW1wiICsgc3BlY2lhbENoYXJhY3RlcnMuam9pbihcIlwiKSArIFwiXVwiLCAnZ2knKTtcbiAgICAvLyBcdTVCRjlcdTcyNzlcdTZCOEFcdTVCNTdcdTdCMjZcdThGREJcdTg4NENcdThGNkNcdTRFNDlcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJlZywgKGNoYXJhY3Rlcjogc3RyaW5nKSA9PiBgXFxcXCR7Y2hhcmFjdGVyfWApO1xufVxuXG5leHBvcnQgY29uc3QgYnVpbGRGb2xkZXJSZWdFeHAgPSAoc2V0dGluZ3M6IFNldHRpbmdzKSA9PiB7XG4gICAgbGV0IHJlZyA9IGVuY29kZShzZXR0aW5ncy5mb2xkZXJOYW1lKTtcbiAgICByZWcgPSByZWcucmVwbGFjZShlbmNvZGUoX2ZpbGVuYW1lKSwgXCIuK1wiKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl5cIiArIHJlZyArIFwiJFwiKTtcbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkRm9sZGVyTmFtZSA9IChzZXR0aW5nczogU2V0dGluZ3MsIGZpbGVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAvLyBcdTYzMDdcdTVCOUFcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcdTYyNDBcdTU3MjhcdTY1ODdcdTRFRjZcdTU5MzlcdUZGMDhcIi4vXCJcdUZGMDlcdTRFMEJcdTYzMDdcdTVCOUFcdTc2ODRcdTY1ODdcdTRFRjZcdTU5MzlcbiAgICByZXR1cm4gXCIuL1wiICsgc2V0dGluZ3MuZm9sZGVyTmFtZS5yZXBsYWNlKF9maWxlbmFtZSwgZmlsZU5hbWUpO1xufVxuXG5leHBvcnQgY29uc3QgYnVpbGRQYXN0ZWRJbWFnZUZpbGVOYW1lID0gKHNldHRpbmdzOiBTZXR0aW5ncywgZmlsZU5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGRhdGV0aW1lID0gbW9tZW50KCkuZm9ybWF0KHNldHRpbmdzLmRhdGV0aW1lRm9ybWF0KTtcbiAgICByZXR1cm4gc2V0dGluZ3MucGFzdGVkSW1hZ2VGaWxlTmFtZS5yZXBsYWNlKF9maWxlbmFtZSwgZmlsZU5hbWUpLnJlcGxhY2UoX2RhdGV0aW1lLCBkYXRldGltZSk7XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBub3JtYWxpemVQYXRoIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgbGFuZyB9IGZyb20gJy4vbGFuZydcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJy4vUGx1Z2luJztcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL1NldHRpbmdzJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBwbHVnaW46IFBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFBsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKGxhbmcuZ2V0KCdzZXR0aW5nc19mb2xkZXJfbmFtZScpKVxuICAgICAgICAgICAgLnNldERlc2MobGFuZy5nZXQoJ3NldHRpbmdzX2ZvbGRlcl9uYW1lX2Rlc2MnKSlcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLmZvbGRlck5hbWUpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlck5hbWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbm9ybWFsaXplUGF0aCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlck5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUobGFuZy5nZXQoJ3NldHRpbmdzX3Bhc3RlZF9pbWFnZV9maWxlX25hbWUnKSlcbiAgICAgICAgICAgIC5zZXREZXNjKGxhbmcuZ2V0KCdzZXR0aW5nc19wYXN0ZWRfaW1hZ2VfZmlsZV9uYW1lX2Rlc2MnKSlcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLnBhc3RlZEltYWdlRmlsZU5hbWUpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3RlZEltYWdlRmlsZU5hbWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3RlZEltYWdlRmlsZU5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUobGFuZy5nZXQoJ3NldHRpbmdzX2RhdGV0aW1lX2Zvcm1hdCcpKVxuICAgICAgICAgICAgLnNldERlc2MobGFuZy5nZXQoJ3NldHRpbmdzX2RhdGV0aW1lX2Zvcm1hdF9kZXNjJykpXG4gICAgICAgICAgICAuYWRkTW9tZW50Rm9ybWF0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXREZWZhdWx0Rm9ybWF0KERFRkFVTFRfU0VUVElOR1MuZGF0ZXRpbWVGb3JtYXQpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRhdGV0aW1lRm9ybWF0KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRldGltZUZvcm1hdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShsYW5nLmdldCgnc2V0dGluZ3NfaGlkZV9mb2xkZXInKSlcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlRm9sZGVyKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uaGlkZUZvbGRlci5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUobGFuZy5nZXQoJ3NldHRpbmdzX2F1dG9fcmVuYW1lX2ZvbGRlcicpKVxuICAgICAgICAgICAgLnNldERlc2MobGFuZy5nZXQoJ3NldHRpbmdzX2F1dG9fcmVuYW1lX2ZvbGRlcl9kZXNjJykpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1JlbmFtZUZvbGRlcilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9SZW5hbWVGb2xkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvUmVuYW1lRm9sZGVyKVxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUobGFuZy5nZXQoJ3NldHRpbmdzX2F1dG9fcmVuYW1lX2ZpbGVzJykpXG4gICAgICAgICAgICAgICAgLnNldERlc2MobGFuZy5nZXQoJ3NldHRpbmdzX2F1dG9fcmVuYW1lX2ZpbGVzX2Rlc2MnKSlcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9SZW5hbWVGaWxlcylcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1JlbmFtZUZpbGVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUobGFuZy5nZXQoJ3NldHRpbmdzX2F1dG9fZGVsZXRlX2ZvbGRlcicpKVxuICAgICAgICAgICAgLnNldERlc2MobGFuZy5nZXQoJ3NldHRpbmdzX2F1dG9fZGVsZXRlX2ZvbGRlcl9kZXNjJykpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b0RlbGV0ZUZvbGRlcilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9EZWxldGVGb2xkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJwbHVnaW5fbmFtZVwiOiBcIlx1OTY0NFx1NEVGNlx1N0JBMVx1NzQwNlx1NTY2OFwiLFxuICAgIFwic2V0dGluZ3NfZm9sZGVyX25hbWVcIjogXCJcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcIixcbiAgICBcInNldHRpbmdzX2ZvbGRlcl9uYW1lX2Rlc2NcIjogXCJcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTc2ODRcdTU0MERcdTc5RjBcdUZGMENcdTRGN0ZcdTc1MjhcdTUzRDhcdTkxQ0YgJHtmaWxlbmFtZX0gXHU4M0I3XHU1M0Q2XHU3QjE0XHU4QkIwXHU3Njg0XHU1NDBEXHU3OUYwXHVGRjBDXHU0RjhCXHVGRjFBJHtmaWxlbmFtZX0ubWRfQXR0YWNobWVudHNcdTMwMDJcIixcbiAgICBcInNldHRpbmdzX3Bhc3RlZF9pbWFnZV9maWxlX25hbWVcIjogXCJcdTIwMUNcdTdDOThcdThEMzRcdTU2RkVcdTcyNDdcdTIwMURcdTY1ODdcdTRFRjZcdTU0MERcIixcbiAgICBcInNldHRpbmdzX3Bhc3RlZF9pbWFnZV9maWxlX25hbWVfZGVzY1wiOiBcIlx1MjAxQ1x1N0M5OFx1OEQzNFx1NTZGRVx1NzI0N1x1MjAxRFx1NEZERFx1NUI1OFx1NEUzQVx1NjU4N1x1NEVGNlx1NzY4NFx1NTQwRFx1NzlGMFx1RkYwQ1x1NEY3Rlx1NzUyOFx1NTNEOFx1OTFDRiAke2ZpbGVuYW1lfSBcdTgzQjdcdTUzRDYgbWQgXHU2NTg3XHU0RUY2XHU3Njg0XHU1NDBEXHU3OUYwXHVGRjBDXHU0RjdGXHU3NTI4XHU1M0Q4XHU5MUNGICR7ZGF0ZXRpbWV9IFx1ODNCN1x1NTNENlx1NjVGNlx1OTVGNFx1RkYwQ1x1NEY4Qlx1RkYxQSR7bm90ZW5hbWV9LSR7ZGF0ZXRpbWV9XHUzMDAyXCIsXG4gICAgXCJzZXR0aW5nc19kYXRldGltZV9mb3JtYXRcIjogXCIke2RhdGV0aW1lfSBcdTY4M0NcdTVGMEZcIixcbiAgICBcInNldHRpbmdzX2RhdGV0aW1lX2Zvcm1hdF9kZXNjXCI6IFwiTW9tZW50IFx1NjgzQ1x1NUYwRlx1RkYwQ1x1NEY4Qlx1RkYxQVlZWVlNTURESEhtbXNzU1NTXHUzMDAyXCIsXG4gICAgXCJzZXR0aW5nc19oaWRlX2ZvbGRlclwiOiBcIlx1OTY5MFx1ODVDRlx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19yZW5hbWVfZm9sZGVyXCI6IFwiXHU4MUVBXHU1MkE4XHU5MUNEXHU1NDdEXHU1NDBEXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX3JlbmFtZV9mb2xkZXJfZGVzY1wiOiBcIi5tZCBcdTY1ODdcdTRFRjZcdTU0MERcdTc5RjBcdTUzRDhcdTUzMTZcdTY1RjZcdUZGMENcdTU5ODJcdTY3OUNcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTU0MERcdTc5RjBcdTRFMkRcdTUzMDVcdTU0MkJcdTIwMUMke2ZpbGVuYW1lfVx1MjAxRFx1RkYwQ1x1ODFFQVx1NTJBOFx1OTFDRFx1NTQ3RFx1NTQwRFx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1MzAwMlwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19yZW5hbWVfZmlsZXNcIjogXCJcdTgxRUFcdTUyQThcdTkxQ0RcdTU0N0RcdTU0MERcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcIixcbiAgICBcInNldHRpbmdzX2F1dG9fcmVuYW1lX2ZpbGVzX2Rlc2NcIjogXCIubWQgXHU2NTg3XHU0RUY2XHU1NDBEXHU3OUYwXHU1M0Q4XHU1MzE2XHU2NUY2XHVGRjBDXHU1OTgyXHU2NzlDXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1NDBEXHU3OUYwXHU0RTJEXHU1MzA1XHU1NDJCXHUyMDFDJHtmaWxlbmFtZX1cdTIwMURcdUZGMENcdTgxRUFcdTUyQThcdTkxQ0RcdTU0N0RcdTU0MERcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTMwMDJcIixcbiAgICBcInNldHRpbmdzX2F1dG9fZGVsZXRlX2ZvbGRlclwiOiBcIlx1ODFFQVx1NTJBOFx1NTIyMFx1OTY2NFx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19kZWxldGVfZm9sZGVyX2Rlc2NcIjogXCIubWQgXHU2NTg3XHU0RUY2XHU1MjIwXHU5NjY0XHU2NUY2XHVGRjBDXHU1OTgyXHU2NzlDXHU5NjQ0XHU0RUY2XHU2NTg3XHU0RUY2XHU1OTM5XHU1NDBEXHU3OUYwXHU0RTJEXHU1MzA1XHU1NDJCXHUyMDFDJHtmaWxlbmFtZX1cdTIwMURcdUZGMENcdTgxRUFcdTUyQThcdTUyMjBcdTk2NjRcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTMwMDJcIixcbiAgICBcImNvbW1hbmRfdG9nZ2xlX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIjogXCJcdTUyMDdcdTYzNjJcdTk2NDRcdTRFRjZcdTY1ODdcdTRFRjZcdTU5MzlcdTc2ODRcdTIwMUNcdTY2M0VcdTc5M0EvXHU5NjkwXHU4NUNGXHUyMDFEXCIsXG4gICAgXCJzdGF0dXNfYXR0YWNobWVudF9mb2xkZXJfdmlzaWJpbGl0eVwiOiBcIlx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1NURGMlx1OTY5MFx1ODVDRlwiLFxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcInBsdWdpbl9uYW1lXCI6IFwiQXR0YWNobWVudCBNYW5hZ2VyXCIsXG4gICAgXCJzZXR0aW5nc19mb2xkZXJfbmFtZVwiOiBcIkF0dGFjaG1lbnQgRm9sZGVyXCIsXG4gICAgXCJzZXR0aW5nc19mb2xkZXJfbmFtZV9kZXNjXCI6IFwiVGhlIG5hbWUgb2YgdGhlIGF0dGFjaG1lbnQgZm9sZGVyLCB1c2luZyB0aGUgdmFyaWFibGUgJHtmaWxlbmFtZX0gdG8gZ2V0IHRoZSBuYW1lIG9mIHRoZSBub3RlIChlLmcuLCAke2ZpbGVuYW1lfS5tZF9BdHRhY2htZW50cykuXCIsXG4gICAgXCJzZXR0aW5nc19wYXN0ZWRfaW1hZ2VfZmlsZV9uYW1lXCI6IFwiUGFzdGVkIEltYWdlIE5hbWVcIixcbiAgICBcInNldHRpbmdzX3Bhc3RlZF9pbWFnZV9maWxlX25hbWVfZGVzY1wiOiBcIlxcXCJQYXN0ZWQgSW1hZ2VcXFwiIGZpbGUgbmFtZSwgdXNpbmcgdGhlIHZhcmlhYmxlICR7ZmlsZW5hbWV9IHRvIGdldCB0aGUgbmFtZSBvZiB0aGUgbWQgZmlsZSwgdXNpbmcgdGhlIHZhcmlhYmxlICR7ZGF0ZXRpbWV9IHRvIGdldCBkYXRldGltZSAoZS5nLiwgJHtub3RlbmFtZX0tJHtkYXRldGltZX0pLlwiLFxuICAgIFwic2V0dGluZ3NfZGF0ZXRpbWVfZm9ybWF0XCI6IFwiJHtkYXRldGltZX0gRm9ybWF0XCIsXG4gICAgXCJzZXR0aW5nc19kYXRldGltZV9mb3JtYXRfZGVzY1wiOiBcIk1vbWVudCBmb3JtYXQgKGUuZy4sIFlZWVlNTURESEhtbXNzU1NTKS5cIixcbiAgICBcInNldHRpbmdzX2hpZGVfZm9sZGVyXCI6IFwiSGlkZSBhdHRhY2htZW50IGZvbGRlclwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19yZW5hbWVfZm9sZGVyXCI6IFwiQXV0b21hdGljYWxseSByZW5hbWUgYXR0YWNobWVudCBmb2xkZXJcIixcbiAgICBcInNldHRpbmdzX2F1dG9fcmVuYW1lX2ZvbGRlcl9kZXNjXCI6IFwiV2hlbiByZW5hbWluZyBtZCBmaWxlcywgYXV0b21hdGljYWxseSByZW5hbWUgYXR0YWNobWVudCBmb2xkZXIgaWYgZm9sZGVyIG5hbWUgY29udGFpbnMgXFxcIiR7ZmlsZW5hbWV9XFxcIi5cIixcbiAgICBcInNldHRpbmdzX2F1dG9fcmVuYW1lX2ZpbGVzXCI6IFwiQXV0b21hdGljYWxseSByZW5hbWUgYXR0YWNobWVudCBmaWxlc1wiLFxuICAgIFwic2V0dGluZ3NfYXV0b19yZW5hbWVfZmlsZXNfZGVzY1wiOiBcIldoZW4gcmVuYW1pbmcgbWQgZmlsZXMsIGF1dG9tYXRpY2FsbHkgcmVuYW1lIGF0dGFjaG1lbnQgZmlsZXMgaWYgZmlsZSBuYW1lIGNvbnRhaW5zIFxcXCIke2ZpbGVuYW1lfVxcXCIuXCIsXG4gICAgXCJzZXR0aW5nc19hdXRvX2RlbGV0ZV9mb2xkZXJcIjogXCJBdXRvbWF0aWNhbGx5IGRlbGV0ZSBhdHRhY2htZW50IGZvbGRlclwiLFxuICAgIFwic2V0dGluZ3NfYXV0b19kZWxldGVfZm9sZGVyX2Rlc2NcIjogXCJXaGVuIGRlbGV0aW5nIG1kIGZpbGVzLCBhdXRvbWF0aWNhbGx5IGRlbGV0ZSBhdHRhY2htZW50IGZvbGRlciBpZiBmb2xkZXIgbmFtZSBjb250YWlucyBcXFwiJHtmaWxlbmFtZX1cXFwiLlwiLFxuICAgIFwiY29tbWFuZF90b2dnbGVfYXR0YWNobWVudF9mb2xkZXJfdmlzaWJpbGl0eVwiOiBcIlRvZ2dsZSB2aXNpYmlsaXR5IG9mIGF0dGFjaG1lbnQgZm9sZGVyXCIsXG4gICAgXCJzdGF0dXNfYXR0YWNobWVudF9mb2xkZXJfdmlzaWJpbGl0eVwiOiBcIkF0dGFjaG1lbnQgZm9sZGVyIGFyZSBoaWRkZW4uXCIsXG59XG4iLCAiaW1wb3J0IHpoIGZyb20gJy4vemgnO1xuaW1wb3J0IGVuIGZyb20gJy4vZW4nO1xuXG5leHBvcnQgY29uc3QgbGFuZyA9IHtcbiAgICBlbixcbiAgICB6aCxcbiAgICBnZXQoa2V5OiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU4QkVEXHU4QTAwXHU4QkJFXHU3RjZFXG4gICAgICAgIGNvbnN0IGxhbmd1YWdlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZScpIHx8IFwiZW5cIjtcbiAgICAgICAgLy8gXHU2MjdFXHU0RTBEXHU1MjMwXHU5RUQ4XHU4QkE0IGVuXG4gICAgICAgIGNvbnN0IF9sYW5nID0gdGhpc1tsYW5ndWFnZV0gfHwgZW47XG4gICAgICAgIC8vIFx1NjI3RVx1NEUwRFx1NTIzMCBrZXlcdUZGMENcdTc2RjRcdTYzQTVcdTRGN0ZcdTc1Mjgga2V5XG4gICAgICAgIGxldCB0ZXh0ID0gX2xhbmdba2V5XSB8fCBrZXk7XG4gICAgICAgIC8vIFx1NjZGRlx1NjM2Mlx1NTM2MFx1NEY0RFx1N0IyNlx1NTNDMlx1NjU3MFxuICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShuZXcgUmVnRXhwKGBcXFxce1xcXFx7JHtpfVxcXFx9XFxcXH1gLCBcImdcIiksIGFyZ3NbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uIHtcbiAgICB2YXVsdDogVmF1bHRcbiAgICBrZXkgPSBcImF0dGFjaG1lbnRGb2xkZXJQYXRoXCJcbiAgICBfdmFsdWU6IHN0cmluZ1xuXG4gICAgY29uc3RydWN0b3IodmF1bHQ6IFZhdWx0KSB7XG4gICAgICAgIHRoaXMudmF1bHQgPSB2YXVsdDtcbiAgICB9XG5cbiAgICBiYWNrdXAoKSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMudmF1bHQuZ2V0Q29uZmlnKHRoaXMua2V5KTtcbiAgICB9XG5cbiAgICB1cGRhdGUodmFsdWU6IHN0cmluZykge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgdGhpcy52YXVsdC5zZXRDb25maWcodGhpcy5rZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXN0b3JlKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLl92YWx1ZSlcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIi4uL1BsdWdpblwiXG5pbXBvcnQgeyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvblwiXG5pbXBvcnQgeyBidWlsZEZvbGRlck5hbWUsIGJ1aWxkUGFzdGVkSW1hZ2VGaWxlTmFtZSB9IGZyb20gXCIuLi9TZXR0aW5nc1wiXG5cbmV4cG9ydCBjbGFzcyBFZGl0b3JQYXN0ZUhhbmRsZXIge1xuICAgIGFwcDogQXBwXG4gICAgcGx1Z2luOiBQbHVnaW5cbiAgICB2YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uOiBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXG5cbiAgICBzdGF0aWMgYnVpbGQocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBFZGl0b3JQYXN0ZUhhbmRsZXIocGx1Z2luKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuaGFuZGxlLmJpbmQoaGFuZGxlcik7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5hcHAgPSBwbHVnaW4uYXBwO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uID0gcGx1Z2luLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb247XG4gICAgfVxuXG4gICAgYXN5bmMgaGFuZGxlKGV2ZW50OiBDbGlwYm9hcmRFdmVudCwgZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykge1xuICAgICAgICBjb25zb2xlLmxvZygnSGFuZGxlIFBhc3RlJyk7XG5cbiAgICAgICAgY29uc3QgbWRGaWxlID0gdmlldy5maWxlO1xuICAgICAgICBpZiAoIW1kRmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2xpcGJvYXJkRGF0YSA9IGV2ZW50LmNsaXBib2FyZERhdGE7XG4gICAgICAgIGlmICghY2xpcGJvYXJkRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvcGxhaW4nKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsaXBib2FyZEl0ZW1zID0gY2xpcGJvYXJkRGF0YS5pdGVtcztcbiAgICAgICAgaWYgKCFjbGlwYm9hcmREYXRhLml0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZEZpbGVOYW1lID0gbWRGaWxlLmJhc2VuYW1lO1xuICAgICAgICB0aGlzLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24udXBkYXRlKGJ1aWxkRm9sZGVyTmFtZSh0aGlzLnBsdWdpbi5zZXR0aW5ncywgbWRGaWxlTmFtZSkpXG5cbiAgICAgICAgZm9yIChjb25zdCBpIGluIGNsaXBib2FyZEl0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoIWNsaXBib2FyZEl0ZW1zLmhhc093blByb3BlcnR5KGkpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGNsaXBib2FyZEl0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGl0ZW0ua2luZCAhPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBcdTUzRUFcdTU5MDRcdTc0MDYgcG5nXHUzMDAxanBlZyBcdTU2RkVcdTcyNDdcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgIT09ICdpbWFnZS9wbmcnICYmIGl0ZW0udHlwZSAhPT0gJ2ltYWdlL2pwZWcnKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBhc3RlSW1hZ2UgPSBpdGVtLmdldEFzRmlsZSgpO1xuICAgICAgICAgICAgaWYgKCFwYXN0ZUltYWdlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFx1NjgwN1x1OEJCMFx1NEU4Qlx1NEVGNlx1ODhBQlx1NTkwNFx1NzQwNlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBpbWFnZUZpbGUgPSBhd2FpdCB0aGlzLmFwcC5zYXZlQXR0YWNobWVudChcbiAgICAgICAgICAgICAgICBidWlsZFBhc3RlZEltYWdlRmlsZU5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MsIG1kRmlsZU5hbWUpLFxuICAgICAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gJ2ltYWdlL3BuZycgPyAncG5nJyA6IGl0ZW0udHlwZSA9PT0gJ2ltYWdlL2pwZWcnID8gJ2pwZWcnIDogJycsXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fYmxvYlRvQXJyYXlCdWZmZXIocGFzdGVJbWFnZSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLmdlbmVyYXRlTWFya2Rvd25MaW5rKGltYWdlRmlsZSwgbWRGaWxlLnBhdGgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9ibG9iVG9BcnJheUJ1ZmZlcihibG9iOiBCbG9iKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgICAgICB9KVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgRWRpdG9yLCBNYXJrZG93blZpZXcgfSBmcm9tICdvYnNpZGlhbic7XG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCIuLi9QbHVnaW5cIlxuaW1wb3J0IHsgVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1ZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb25cIlxuaW1wb3J0IHsgYnVpbGRGb2xkZXJOYW1lIH0gZnJvbSBcIi4uL1NldHRpbmdzXCJcblxuZXhwb3J0IGNsYXNzIEVkaXRvckRyb3BIYW5kbGVyIHtcbiAgICBwbHVnaW46IFBsdWdpblxuICAgIHZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb246IFZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb25cblxuICAgIHN0YXRpYyBidWlsZChwbHVnaW46IFBsdWdpbikge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IEVkaXRvckRyb3BIYW5kbGVyKHBsdWdpbik7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZS5iaW5kKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24gPSBwbHVnaW4udmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbjtcbiAgICB9XG5cbiAgICBhc3luYyBoYW5kbGUoZXZlbnQ6IERyYWdFdmVudCwgZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykge1xuICAgICAgICBjb25zb2xlLmxvZygnSGFuZGxlIERyb3AnKTtcblxuICAgICAgICBjb25zdCBtZEZpbGUgPSB2aWV3LmZpbGU7XG4gICAgICAgIGlmICghbWRGaWxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24udXBkYXRlKGJ1aWxkRm9sZGVyTmFtZSh0aGlzLnBsdWdpbi5zZXR0aW5ncywgbWRGaWxlLmJhc2VuYW1lKSlcbiAgICB9XG59IiwgImltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwiLi4vUGx1Z2luXCJcbmltcG9ydCB7IFZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9WYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXCJcbmltcG9ydCB7IGJ1aWxkRm9sZGVyTmFtZSB9IGZyb20gXCIuLi9TZXR0aW5nc1wiXG5cbmV4cG9ydCBjbGFzcyBGaWxlT3BlbkhhbmRsZXIge1xuICAgIHBsdWdpbjogUGx1Z2luXG4gICAgdmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbjogVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvblxuXG4gICAgc3RhdGljIGJ1aWxkKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgRmlsZU9wZW5IYW5kbGVyKHBsdWdpbik7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZS5iaW5kKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb24gPSBwbHVnaW4udmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbjtcbiAgICB9XG5cbiAgICBhc3luYyBoYW5kbGUoZmlsZTogVEZpbGUgfCBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdIYW5kbGUgRmlsZSBPcGVuJyk7XG5cbiAgICAgICAgaWYgKGZpbGUgPT0gbnVsbCB8fCBmaWxlLmV4dGVuc2lvbiAhPT0gJ21kJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uLnVwZGF0ZShidWlsZEZvbGRlck5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MsIGZpbGUuYmFzZW5hbWUpKVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgVEZpbGUsIFZhdWx0LCBGaWxlU3lzdGVtQWRhcHRlciB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCAqIGFzIFBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCIuLi9QbHVnaW5cIlxuaW1wb3J0IHsgVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1ZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb25cIlxuaW1wb3J0IHsgYnVpbGRGb2xkZXJOYW1lLCBjb250YWluc0ZpbGVuYW1lIH0gZnJvbSBcIi4uL1NldHRpbmdzXCJcblxuZXhwb3J0IGNsYXNzIERlbGV0ZUhhbmRsZXIge1xuICAgIHZhdWx0OiBWYXVsdFxuICAgIHBsdWdpbjogUGx1Z2luXG4gICAgYWRhcHRlcjogRmlsZVN5c3RlbUFkYXB0ZXJcbiAgICB2YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uOiBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uXG5cbiAgICBzdGF0aWMgYnVpbGQocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBEZWxldGVIYW5kbGVyKHBsdWdpbik7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZS5iaW5kKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMudmF1bHQgPSBwbHVnaW4uYXBwLnZhdWx0O1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5hZGFwdGVyID0gcGx1Z2luLmFkYXB0ZXI7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiA9IHBsdWdpbi52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGhhbmRsZShmaWxlOiBURmlsZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnSGFuZGxlIERlbGV0ZScpO1xuXG4gICAgICAgIGlmIChmaWxlLmV4dGVuc2lvbiAhPT0gJ21kJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gXHU2NzJBXHU1MzA1XHU1NDJCIGZpbGVuYW1lXHVGRjBDXHU4QkY0XHU2NjBFXHU0RTBEXHU2NjJGXHU2QkNGXHU0RTJBIG1kIFx1NjU4N1x1NEVGNlx1NEUwMFx1NEUyQVx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVx1RkYwOFx1NEUwRFx1ODBGRFx1NTIyMFx1OTY2NFx1RkYwOVxuICAgICAgICBpZiAoIWNvbnRhaW5zRmlsZW5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MpIHx8ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvRGVsZXRlRm9sZGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gUGF0aC5qb2luKFBhdGguZGlybmFtZShmaWxlLnBhdGgpLCBidWlsZEZvbGRlck5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MsIGZpbGUuYmFzZW5hbWUpKTtcblxuICAgICAgICBpZiAoYXdhaXQgdGhpcy5hZGFwdGVyLmV4aXN0cyhmb2xkZXJQYXRoKSkge1xuXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0IHRyYXNoT3B0aW9uID0gdGhpcy52YXVsdC5nZXRDb25maWcoXCJ0cmFzaE9wdGlvblwiKTtcblxuICAgICAgICAgICAgaWYgKHRyYXNoT3B0aW9uID09PSBcInN5c3RlbVwiKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGFwdGVyLnRyYXNoU3lzdGVtKGZvbGRlclBhdGgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFzaE9wdGlvbiA9PT0gXCJsb2NhbFwiKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGFwdGVyLnRyYXNoTG9jYWwoZm9sZGVyUGF0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRhcHRlci5yZW1vdmUoZm9sZGVyUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRlZCcsIGZvbGRlclBhdGgpXG4gICAgICAgIH1cbiAgICB9XG59IiwgImltcG9ydCB7IFRGaWxlLCBWYXVsdCwgRmlsZU1hbmFnZXIsIEZpbGVTeXN0ZW1BZGFwdGVyLCBub3JtYWxpemVQYXRoIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgUGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIi4uL1BsdWdpblwiXG5pbXBvcnQgeyBWYXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvblwiXG5pbXBvcnQgeyBidWlsZEZvbGRlck5hbWUsIGNvbnRhaW5zRmlsZW5hbWUgfSBmcm9tIFwiLi4vU2V0dGluZ3NcIlxuXG5leHBvcnQgY2xhc3MgUmVuYW1lSGFuZGxlciB7XG4gICAgdmF1bHQ6IFZhdWx0XG4gICAgcGx1Z2luOiBQbHVnaW5cbiAgICBhZGFwdGVyOiBGaWxlU3lzdGVtQWRhcHRlclxuICAgIGZpbGVNYW5hZ2VyOiBGaWxlTWFuYWdlclxuICAgIHZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb246IFZhdWx0QXR0YWNobWVudENvbmZpZ3VyYXRpb25cblxuICAgIHN0YXRpYyBidWlsZChwbHVnaW46IFBsdWdpbikge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IFJlbmFtZUhhbmRsZXIocGx1Z2luKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuaGFuZGxlLmJpbmQoaGFuZGxlcik7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy52YXVsdCA9IHBsdWdpbi5hcHAudmF1bHQ7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmFkYXB0ZXIgPSBwbHVnaW4uYWRhcHRlcjtcbiAgICAgICAgdGhpcy5maWxlTWFuYWdlciA9IHBsdWdpbi5hcHAuZmlsZU1hbmFnZXI7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbiA9IHBsdWdpbi52YXVsdEF0dGFjaG1lbnRDb25maWd1cmF0aW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGhhbmRsZShuZXdGaWxlOiBURmlsZSwgb2xkRmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zb2xlLmxvZygnSGFuZGxlIFJlbmFtZScpO1xuXG4gICAgICAgIGlmIChuZXdGaWxlLmV4dGVuc2lvbiAhPT0gJ21kJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gXHU2NzJBXHU1MzA1XHU1NDJCIGZpbGVuYW1lXHVGRjBDXHU4QkY0XHU2NjBFXHU0RTBEXHU2NjJGXHU2QkNGXHU0RTJBIG1kIFx1NjU4N1x1NEVGNlx1NEUwMFx1NEUyQVx1OTY0NFx1NEVGNlx1NjU4N1x1NEVGNlx1NTkzOVxuICAgICAgICBpZiAoIWNvbnRhaW5zRmlsZW5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MpIHx8ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvUmVuYW1lRm9sZGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3RmlsZU5hbWUgPSBuZXdGaWxlLmJhc2VuYW1lO1xuICAgICAgICBjb25zdCBuZXdGb2xkZXJOYW1lID0gYnVpbGRGb2xkZXJOYW1lKHRoaXMucGx1Z2luLnNldHRpbmdzLCBuZXdGaWxlTmFtZSk7XG4gICAgICAgIHRoaXMudmF1bHRBdHRhY2htZW50Q29uZmlndXJhdGlvbi51cGRhdGUobmV3Rm9sZGVyTmFtZSlcbiAgICAgICAgY29uc3QgbmV3Rm9sZGVyUGF0aCA9IFBhdGguam9pbihQYXRoLmRpcm5hbWUobmV3RmlsZS5wYXRoKSwgbmV3Rm9sZGVyTmFtZSk7XG5cbiAgICAgICAgY29uc3Qgb2xkRmlsZU5hbWUgPSBQYXRoLmJhc2VuYW1lKG9sZEZpbGVQYXRoLCAnLm1kJyk7XG4gICAgICAgIGNvbnN0IG9sZEZvbGRlclBhdGggPSBQYXRoLmpvaW4oUGF0aC5kaXJuYW1lKG9sZEZpbGVQYXRoKSwgYnVpbGRGb2xkZXJOYW1lKHRoaXMucGx1Z2luLnNldHRpbmdzLCBvbGRGaWxlTmFtZSkpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuX3JlbmFtZUZvbGRlcihvbGRGb2xkZXJQYXRoLCBuZXdGb2xkZXJQYXRoKTtcblxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9SZW5hbWVGaWxlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5fcmVuYW1lRmlsZXMobmV3Rm9sZGVyUGF0aCwgbmV3RmlsZU5hbWUsIG9sZEZpbGVOYW1lKVxuICAgIH1cblxuICAgIGFzeW5jIF9yZW5hbWVGb2xkZXIob2xkRm9sZGVyUGF0aDogc3RyaW5nLCBuZXdGb2xkZXJQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGF3YWl0ICF0aGlzLmFkYXB0ZXIuZXhpc3RzKG9sZEZvbGRlclBhdGgpIHx8IG9sZEZvbGRlclBhdGggPT09IG5ld0ZvbGRlclBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRGb2xkZXIgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvbGRGb2xkZXJQYXRoKTtcblxuICAgICAgICBpZiAob2xkRm9sZGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuZmlsZU1hbmFnZXIucmVuYW1lRmlsZShvbGRGb2xkZXIsIG5ld0ZvbGRlclBhdGgpO1xuXG4gICAgICAgIC8vIFx1NzIzNlx1NjU4N1x1NEVGNlx1NTkzOVx1NEUzQVx1N0E3QVx1NjVGNlx1RkYwQ1x1OTg3QVx1NEZCRlx1NTIyMFx1OTY2NFx1NzIzNlx1NjU4N1x1NEVGNlx1NTkzOVxuICAgICAgICBjb25zdCBvbGRGb2xkZXJQYXJlbnRQYXRoID0gUGF0aC5kaXJuYW1lKG9sZEZvbGRlclBhdGgpO1xuICAgICAgICBjb25zdCBvbGRGb2xkZXJQYXJlbnRMaXN0ZWRGaWxlcyA9IGF3YWl0IHRoaXMuYWRhcHRlci5saXN0KG9sZEZvbGRlclBhcmVudFBhdGgpO1xuICAgICAgICBpZiAob2xkRm9sZGVyUGFyZW50TGlzdGVkRmlsZXMuZm9sZGVycy5sZW5ndGggPT09IDAgJiYgb2xkRm9sZGVyUGFyZW50TGlzdGVkRmlsZXMuZmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkYXB0ZXIucm1kaXIob2xkRm9sZGVyUGFyZW50UGF0aCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfcmVuYW1lRmlsZXMobmV3Rm9sZGVyUGF0aDogc3RyaW5nLCBuZXdGaWxlTmFtZTogc3RyaW5nLCBvbGRGaWxlTmFtZTogc3RyaW5nKSB7XG5cbiAgICAgICAgY29uc3QgYXR0YWNobWVudEZpbGVzID0gKGF3YWl0IHRoaXMuYWRhcHRlci5saXN0KG5ld0ZvbGRlclBhdGgpKS5maWxlcztcblxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgYXR0YWNobWVudEZpbGVzKSB7XG5cbiAgICAgICAgICAgIGxldCBhdHRhY2htZW50RmlsZU5hbWUgPSBQYXRoLmJhc2VuYW1lKGZpbGUpO1xuXG4gICAgICAgICAgICBpZiAoIWF0dGFjaG1lbnRGaWxlTmFtZS5jb250YWlucyhvbGRGaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXR0YWNobWVudEZpbGVOYW1lID0gYXR0YWNobWVudEZpbGVOYW1lLnJlcGxhY2Uob2xkRmlsZU5hbWUsIG5ld0ZpbGVOYW1lKTtcblxuICAgICAgICAgICAgY29uc3QgbmV3RmlsZVBhdGggPSBub3JtYWxpemVQYXRoKFBhdGguam9pbihuZXdGb2xkZXJQYXRoLCBhdHRhY2htZW50RmlsZU5hbWUpKTtcblxuICAgICAgICAgICAgY29uc3QgYXR0YWNobWVudEZpbGUgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlKTtcbiAgICAgICAgICAgIGlmIChhdHRhY2htZW50RmlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUoYXR0YWNobWVudEZpbGUsIG5ld0ZpbGVQYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tICcuLi9QbHVnaW4nXG5pbXBvcnQgeyBsYW5nIH0gZnJvbSAnLi4vbGFuZydcbmltcG9ydCB7IGJ1aWxkRm9sZGVyUmVnRXhwIH0gZnJvbSAnLi4vU2V0dGluZ3MnXG5cbmV4cG9ydCBjbGFzcyBIaWRlRm9sZGVyIHtcbiAgICBwbHVnaW46IFBsdWdpblxuICAgIHJpYmJvbkljb25CdXR0b246IEhUTUxFbGVtZW50O1xuICAgIHN0YXR1c0Jhckl0ZW06IEhUTUxFbGVtZW50O1xuICAgIG11dGF0aW9uT2JzZXJ2ZXI6IE11dGF0aW9uT2JzZXJ2ZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBsb2FkKCkge1xuICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG4gICAgICAgIHRoaXMucmliYm9uSWNvbkJ1dHRvbiA9IHRoaXMucGx1Z2luLmFkZFJpYmJvbkljb24oXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlRm9sZGVyID8gXCJleWUtb2ZmXCIgOiBcImV5ZVwiLFxuICAgICAgICAgICAgbGFuZy5nZXQoXCJjb21tYW5kX3RvZ2dsZV9hdHRhY2htZW50X2ZvbGRlcl92aXNpYmlsaXR5XCIpLFxuICAgICAgICAgICAgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPSAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBUaGlzIGFkZHMgYSBzdGF0dXMgYmFyIGl0ZW0gdG8gdGhlIGJvdHRvbSBvZiB0aGUgYXBwLiBEb2VzIG5vdCB3b3JrIG9uIG1vYmlsZSBhcHBzLlxuICAgICAgICB0aGlzLnN0YXR1c0Jhckl0ZW0gPSB0aGlzLnBsdWdpbi5hZGRTdGF0dXNCYXJJdGVtKCk7XG4gICAgICAgIHRoaXMuc3RhdHVzQmFySXRlbS5zZXRUZXh0KHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPyBcIkF0dGFjaG1lbnQgZm9sZGVycyBhcmUgaGlkZGVuXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBUaGlzIGFkZHMgYSBjb21tYW5kIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhbnl3aGVyZVxuICAgICAgICB0aGlzLnBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcInRvZ2dsZS1hdHRhY2htZW50LWZvbGRlcl92aXNpYmlsaXR5XCIsXG4gICAgICAgICAgICBuYW1lOiBsYW5nLmdldChcImNvbW1hbmRfdG9nZ2xlX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIiksXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPSAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvblJlY29yZCkgPT4ge1xuICAgICAgICAgICAgbXV0YXRpb25SZWNvcmQuZm9yRWFjaChyZWNvcmQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQudGFyZ2V0Py5wYXJlbnRFbGVtZW50Py5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXYtZm9sZGVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEZvbGRlcnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHdpbmRvdy5kb2N1bWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgICAgIH0sIDEwMDApXG4gICAgfVxuXG4gICAgYXN5bmMgcmVmcmVzaCgpIHtcbiAgICAgICAgc2V0SWNvbih0aGlzLnJpYmJvbkljb25CdXR0b24sIHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPyBcImV5ZS1vZmZcIiA6IFwiZXllXCIpO1xuICAgICAgICB0aGlzLnN0YXR1c0Jhckl0ZW0uaW5uZXJIVE1MID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZvbGRlciA/IGxhbmcuZ2V0KFwic3RhdHVzX2F0dGFjaG1lbnRfZm9sZGVyX3Zpc2liaWxpdHlcIikgOiBcIlwiO1xuICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2hGb2xkZXJzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVmcmVzaEZvbGRlcnMoKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IGJ1aWxkRm9sZGVyUmVnRXhwKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcblxuICAgICAgICBjb25zdCBmb2xkZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXYtZm9sZGVyXCIpO1xuXG4gICAgICAgIGZvbGRlcnMuZm9yRWFjaCgoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IGZvbGRlci5xdWVyeVNlbGVjdG9yKFwiLm5hdi1mb2xkZXItdGl0bGUtY29udGVudFwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGZvbGRlck5hbWUgPSB0aXRsZT8uaW5uZXJUZXh0O1xuICAgICAgICAgICAgaWYgKGZpbHRlci50ZXN0KGZvbGRlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgKGZvbGRlciBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVGb2xkZXIgPyBcIm5vbmVcIiA6IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdW5sb2FkKCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDQUEsSUFBQUEsbUJBQTREOzs7QUNBNUQsc0JBQXVCO0FBWXZCLElBQU0sWUFBWTtBQUNsQixJQUFNLFlBQVk7QUFFWCxJQUFNLG1CQUE2QjtBQUFBLEVB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
